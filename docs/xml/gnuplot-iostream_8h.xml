<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="gnuplot-iostream_8h" kind="file" language="C++">
    <compoundname>gnuplot-iostream.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">vector</includes>
    <includes local="no">complex</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cmath</includes>
    <includes local="no">boost/iostreams/device/file_descriptor.hpp</includes>
    <includes local="no">boost/iostreams/stream.hpp</includes>
    <includes local="no">boost/version.hpp</includes>
    <includes local="no">boost/utility.hpp</includes>
    <includes local="no">boost/tuple/tuple.hpp</includes>
    <includes local="no">boost/mpl/bool.hpp</includes>
    <includes local="no">boost/cstdint.hpp</includes>
    <includedby refid="_navigation_8cpp" local="no">/home/rajshinde/GMOCK/Robot_Controller_Module/app/Navigation.cpp</includedby>
    <incdepgraph>
      <node id="125">
        <label>iomanip</label>
      </node>
      <node id="132">
        <label>boost/version.hpp</label>
      </node>
      <node id="134">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="129">
        <label>cmath</label>
      </node>
      <node id="122">
        <label>stdexcept</label>
      </node>
      <node id="123">
        <label>string</label>
      </node>
      <node id="131">
        <label>boost/iostreams/stream.hpp</label>
      </node>
      <node id="119">
        <label>fstream</label>
      </node>
      <node id="117">
        <label>/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h</label>
        <link refid="gnuplot-iostream.h"/>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>boost/cstdint.hpp</label>
      </node>
      <node id="118">
        <label>cstdio</label>
      </node>
      <node id="126">
        <label>vector</label>
      </node>
      <node id="124">
        <label>utility</label>
      </node>
      <node id="121">
        <label>sstream</label>
      </node>
      <node id="133">
        <label>boost/utility.hpp</label>
      </node>
      <node id="128">
        <label>cstdlib</label>
      </node>
      <node id="120">
        <label>iostream</label>
      </node>
      <node id="127">
        <label>complex</label>
      </node>
      <node id="130">
        <label>boost/iostreams/device/file_descriptor.hpp</label>
      </node>
      <node id="135">
        <label>boost/mpl/bool.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="138">
        <label>/home/rajshinde/GMOCK/Robot_Controller_Module/app/Navigation.cpp</label>
        <link refid="_navigation_8cpp"/>
      </node>
      <node id="137">
        <label>/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h</label>
        <link refid="gnuplot-iostream.h"/>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structgnuplotio_1_1dont__treat__as__stl__container" prot="public">gnuplotio::dont_treat_as_stl_container</innerclass>
    <innerclass refid="structgnuplotio_1_1is__like__stl__container" prot="public">gnuplotio::is_like_stl_container</innerclass>
    <innerclass refid="structgnuplotio_1_1is__boost__tuple__nulltype" prot="public">gnuplotio::is_boost_tuple_nulltype</innerclass>
    <innerclass refid="structgnuplotio_1_1is__boost__tuple__nulltype_3_01boost_1_1tuples_1_1null__type_01_4" prot="public">gnuplotio::is_boost_tuple_nulltype&lt; boost::tuples::null_type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1is__boost__tuple" prot="public">gnuplotio::is_boost_tuple</innerclass>
    <innerclass refid="classgnuplotio_1_1_gnuplot_feedback" prot="public">gnuplotio::GnuplotFeedback</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender" prot="public">gnuplotio::TextSender</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender" prot="public">gnuplotio::BinarySender</innerclass>
    <innerclass refid="structgnuplotio_1_1_flat_binary_sender" prot="public">gnuplotio::FlatBinarySender</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender" prot="public">gnuplotio::BinfmtSender</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01float_01_4" prot="public">gnuplotio::BinfmtSender&lt; float &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01double_01_4" prot="public">gnuplotio::BinfmtSender&lt; double &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int8__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::int8_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint8__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::uint8_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int16__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::int16_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint16__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::uint16_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int32__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::int32_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint32__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::uint32_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int64__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::int64_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint64__t_01_4" prot="public">gnuplotio::BinfmtSender&lt; boost::uint64_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01float_01_4" prot="public">gnuplotio::BinarySender&lt; float &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01double_01_4" prot="public">gnuplotio::BinarySender&lt; double &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int8__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::int8_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint8__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::uint8_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int16__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::int16_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint16__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::uint16_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int32__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::int32_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint32__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::uint32_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int64__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::int64_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint64__t_01_4" prot="public">gnuplotio::BinarySender&lt; boost::uint64_t &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_cast_int_text_sender" prot="public">gnuplotio::CastIntTextSender</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01char_01_4" prot="public">gnuplotio::TextSender&lt; char &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01signed_01char_01_4" prot="public">gnuplotio::TextSender&lt; signed char &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01unsigned_01char_01_4" prot="public">gnuplotio::TextSender&lt; unsigned char &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_float_text_sender" prot="public">gnuplotio::FloatTextSender</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01float_01_4" prot="public">gnuplotio::TextSender&lt; float &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01double_01_4" prot="public">gnuplotio::TextSender&lt; double &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01long_01double_01_4" prot="public">gnuplotio::TextSender&lt; long double &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" prot="public">gnuplotio::TextSender&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" prot="public">gnuplotio::BinfmtSender&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" prot="public">gnuplotio::BinarySender&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">gnuplotio::TextSender&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">gnuplotio::BinfmtSender&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">gnuplotio::BinarySender&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ad1ac3a3da167856c52be6ae54ba2c114" prot="public">gnuplotio::TextSender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, boost::mpl::not_&lt; is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_text_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ab6d6864cc1b3ed233c9f15134694f953" prot="public">gnuplotio::TextSender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_e9270e5cb86823566a0af3940aa51061" prot="public">gnuplotio::BinfmtSender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, boost::mpl::not_&lt; is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binfmt_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_8c86f170c2e2969f5519817e5c367132" prot="public">gnuplotio::BinfmtSender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_916ff7a758aa0b8917fd3b30ff275f06" prot="public">gnuplotio::BinarySender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, boost::mpl::not_&lt; is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_binary_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_29e1098ca8b7afc20f2ca0bc2e79506a" prot="public">gnuplotio::BinarySender&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="structgnuplotio_1_1_error___was_not_container" prot="public">gnuplotio::Error_WasNotContainer</innerclass>
    <innerclass refid="structgnuplotio_1_1_error___inappropriate_deref" prot="public">gnuplotio::Error_InappropriateDeref</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits" prot="public">gnuplotio::ArrayTraits</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_defaults" prot="public">gnuplotio::ArrayTraitsDefaults</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01_t_01_6_01_4" prot="public">gnuplotio::ArrayTraits&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_iterator_range" prot="public">gnuplotio::IteratorRange</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01is__like__stl__co9e1736bbd08cd58c6993ab613a998887" prot="public">gnuplotio::ArrayTraits&lt; T, typename boost::enable_if&lt; is_like_stl_container&lt; T &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01_t[_n]_4" prot="public">gnuplotio::ArrayTraits&lt; T[N]&gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_pair_of_range" prot="public">gnuplotio::PairOfRange</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" prot="public">gnuplotio::ArrayTraits&lt; std::pair&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1a8de3a8fe198d85f7f5d28b9a2f5bf229" prot="public">gnuplotio::ArrayTraits&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, boost::mpl::not_&lt; is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ad3fa8e75dccbaae12a06d17831678a88" prot="public">gnuplotio::ArrayTraits&lt; T, typename boost::enable_if&lt; boost::mpl::and_&lt; is_boost_tuple&lt; T &gt;, is_boost_tuple_nulltype&lt; typename T::tail_type &gt; &gt; &gt;::type &gt;</innerclass>
    <innerclass refid="classgnuplotio_1_1_vec_of_range" prot="public">gnuplotio::VecOfRange</innerclass>
    <innerclass refid="classgnuplotio_1_1plotting__empty__container" prot="public">gnuplotio::plotting_empty_container</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_text" prot="public">gnuplotio::ModeText</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_binary" prot="public">gnuplotio::ModeBinary</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_binfmt" prot="public">gnuplotio::ModeBinfmt</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_size" prot="public">gnuplotio::ModeSize</innerclass>
    <innerclass refid="structgnuplotio_1_1_col_unwrap_no" prot="public">gnuplotio::ColUnwrapNo</innerclass>
    <innerclass refid="structgnuplotio_1_1_col_unwrap_yes" prot="public">gnuplotio::ColUnwrapYes</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode1_d" prot="public">gnuplotio::Mode1D</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode2_d" prot="public">gnuplotio::Mode2D</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode1_d_unwrap" prot="public">gnuplotio::Mode1DUnwrap</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode2_d_unwrap" prot="public">gnuplotio::Mode2DUnwrap</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_auto" prot="public">gnuplotio::ModeAuto</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_auto_decoder" prot="public">gnuplotio::ModeAutoDecoder</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arraea646779afc1e35efaeffcebe81e18a0" prot="public">gnuplotio::ModeAutoDecoder&lt; T, typename boost::enable_if_c&lt; (ArrayTraits&lt; T &gt;::depth==1) &gt;::type</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arra33ab7f3325313485a7f29355d9a819fc" prot="public">gnuplotio::ModeAutoDecoder&lt; T, typename boost::enable_if_c&lt; (ArrayTraits&lt; T &gt;::depth==2)&amp;&amp;!ArrayTraits&lt; T &gt;::allow_auto_unwrap &gt;::type</innerclass>
    <innerclass refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arra8faa7fb46cef74a29a23f22c000e4a99" prot="public">gnuplotio::ModeAutoDecoder&lt; T, typename boost::enable_if_c&lt; (ArrayTraits&lt; T &gt;::depth==2)&amp;&amp;ArrayTraits&lt; T &gt;::allow_auto_unwrap &gt;::type</innerclass>
    <innerclass refid="structgnuplotio_1_1_file_handle_wrapper" prot="public">gnuplotio::FileHandleWrapper</innerclass>
    <innerclass refid="classgnuplotio_1_1_gnuplot" prot="public">gnuplotio::Gnuplot</innerclass>
    <innernamespace refid="namespacegnuplotio">gnuplotio</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gnuplot-iostream_8h_1ab3ce4a7287aefeb9af2345e08cb2d5c6" prot="public" static="no">
        <name>GNUPLOT_IOSTREAM_VERSION</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="44" column="9" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1aff01a99842ed9eb01a166d4bf19543c9" prot="public" static="no">
        <name>GNUPLOT_ENABLE_CXX11</name>
        <initializer>(__cplusplus &gt;= 201103)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="47" column="10" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1a763d85d6a998475c41e5bea11e6f0a16" prot="public" static="no">
        <name>GNUPLOT_STATIC_ASSERT_MSG</name>
        <param><defname>cond</defname></param>
        <param><defname>msg</defname></param>
        <initializer>BOOST_STATIC_ASSERT((cond))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="104" column="11" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1aceaee9cbe0b7786c1ee8aa2e8b79ed1a" prot="public" static="no">
        <name>GNUPLOT_DEPRECATE</name>
        <param><defname>msg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="117" column="11" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1aed027791e656970e6de95b047dc375b1" prot="public" static="no">
        <name>GNUPLOT_PCLOSE</name>
        <initializer>pclose</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="127" column="11" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1a92922430eb3df3ace3b18c75b91a0ab8" prot="public" static="no">
        <name>GNUPLOT_POPEN</name>
        <initializer>popen</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="128" column="10" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1abcc0f8f4d67f147c013bb33b55dc3a16" prot="public" static="no">
        <name>GNUPLOT_FILENO</name>
        <initializer>fileno</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="129" column="10" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1ac10f83c29b94951000138a0ab2054956" prot="public" static="no">
        <name>GNUPLOT_ISNAN</name>
        <initializer>std::isnan</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="137" column="10" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1aef2d72925bdeb9f505df49edbf7579bf" prot="public" static="no">
        <name>GNUPLOT_MSVC_WARNING_4996_PUSH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="151" column="11" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1a4429193ca854af851cec4220c2d9102e" prot="public" static="no">
        <name>GNUPLOT_MSVC_WARNING_4996_POP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="152" column="10" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gnuplot-iostream_8h_1afe4b1cc99e87d3bb8bbb07280db4b697" prot="public" static="no">
        <name>GNUPLOT_DEFAULT_COMMAND</name>
        <initializer>&quot;gnuplot -persist&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" line="164" column="11" bodyfile="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>vim:foldmethod=marker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Copyright<sp/>(c)<sp/>2013<sp/>Daniel<sp/>Stahlke<sp/>(dan@stahlke.org)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="14"><highlight class="comment">all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="22"><highlight class="comment">THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>C++<sp/>interface<sp/>to<sp/>gnuplot.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>Web<sp/>page:<sp/>http://www.stahlke.org/dan/gnuplot-iostream</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Documentation:<sp/>https://github.com/dstahlke/gnuplot-iostream/wiki</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>The<sp/>whole<sp/>library<sp/>consists<sp/>of<sp/>this<sp/>monolithic<sp/>header<sp/>file,<sp/>for<sp/>ease<sp/>of<sp/>installation<sp/>(the</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>Makefile<sp/>and<sp/>*.cc<sp/>files<sp/>are<sp/>only<sp/>for<sp/>examples<sp/>and<sp/>tests).</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>TODO:</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>What<sp/>version<sp/>of<sp/>boost<sp/>is<sp/>currently<sp/>required?</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>Callbacks<sp/>via<sp/>gnuplot&apos;s<sp/>&apos;bind&apos;<sp/>function.<sp/><sp/>This<sp/>would<sp/>allow<sp/>triggering<sp/>user<sp/>functions<sp/>when</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>keys<sp/>are<sp/>pressed<sp/>in<sp/>the<sp/>gnuplot<sp/>window.<sp/><sp/>However,<sp/>it<sp/>would<sp/>require<sp/>a<sp/>PTY<sp/>reader<sp/>thread.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>Maybe<sp/>temporary<sp/>files<sp/>read<sp/>in<sp/>a<sp/>thread<sp/>can<sp/>replace<sp/>PTY<sp/>stuff.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GNUPLOT_IOSTREAM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GNUPLOT_IOSTREAM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Includes<sp/>and<sp/>defines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GNUPLOT_IOSTREAM_VERSION<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_ENABLE_CXX11<sp/>(__cplusplus<sp/>&gt;=<sp/>201103)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>system<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_ENABLE_PTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;termios.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;util.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;pty.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ENABLE_PTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>system<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iostreams/device/file_descriptor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/iostreams/stream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/version.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/utility.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/tuple/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/mpl/bool.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>version<sp/>of<sp/>boost<sp/>which<sp/>has<sp/>v3<sp/>of<sp/>the<sp/>filesystem<sp/>libraries<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_VERSION<sp/>&gt;=<sp/>104600</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BOOST_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>because<sp/>VS2008<sp/>doesn&apos;t<sp/>have<sp/>stdint.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/cstdint.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>this<sp/>is<sp/>here<sp/>for<sp/>reverse<sp/>compatibility.<sp/><sp/>The<sp/>new<sp/>way<sp/>to<sp/>enable<sp/>blitz<sp/>support<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>include<sp/>the<sp/>gnuplot-iostream.h<sp/>header<sp/>after<sp/>you<sp/>include<sp/>the<sp/>blitz<sp/>header<sp/>(likewise<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>armadillo).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_ENABLE_BLITZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;blitz/array.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BOOST_STATIC_ASSERT_MSG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_STATIC_ASSERT_MSG(cond,<sp/>msg)<sp/>BOOST_STATIC_ASSERT_MSG((cond),<sp/>msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_STATIC_ASSERT_MSG(cond,<sp/>msg)<sp/>BOOST_STATIC_ASSERT((cond))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>defined,<sp/>warn<sp/>about<sp/>use<sp/>of<sp/>deprecated<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_DEPRECATE_WARN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>GNUPLOT_DEPRECATE(msg)<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>GNUPLOT_DEPRECATE(msg)<sp/>__declspec(deprecated(msg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>GNUPLOT_DEPRECATE(msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_DEPRECATE(msg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Patch<sp/>for<sp/>Windows<sp/>by<sp/>Damien<sp/>Loison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_PCLOSE<sp/>_pclose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_POPEN<sp/><sp/>_popen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_FILENO<sp/>_fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_PCLOSE<sp/>pclose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_POPEN<sp/><sp/>popen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_FILENO<sp/>fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_ISNAN<sp/>_isnan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cppreference.com<sp/>says<sp/>std::isnan<sp/>is<sp/>only<sp/>for<sp/>C++11.<sp/><sp/>However,<sp/>this<sp/>seems<sp/>to<sp/>work<sp/>on<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>I<sp/>am<sp/>assuming<sp/>that<sp/>if<sp/>isnan<sp/>exists<sp/>in<sp/>math.h<sp/>then<sp/>std::isnan<sp/>exists<sp/>in<sp/>cmath.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_ISNAN<sp/>std::isnan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>gives<sp/>a<sp/>warning<sp/>saying<sp/>that<sp/>fopen<sp/>and<sp/>getenv<sp/>are<sp/>not<sp/>secure.<sp/><sp/>But<sp/>they<sp/>are<sp/>secure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>their<sp/>replacement<sp/>functions<sp/>are<sp/>not<sp/>simple<sp/>drop-in<sp/>replacements.<sp/><sp/>The<sp/>best</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>solution<sp/>is<sp/>to<sp/>just<sp/>temporarily<sp/>disable<sp/>this<sp/>warning<sp/>whenever<sp/>fopen<sp/>or<sp/>getenv<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://stackoverflow.com/a/4805353/1048959</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_MSVC_WARNING_4996_PUSH<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pragma(warning(push))<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pragma(warning(disable:4996))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_MSVC_WARNING_4996_POP<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pragma(warning(pop))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_MSVC_WARNING_4996_PUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_MSVC_WARNING_4996_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GNUPLOT_DEFAULT_COMMAND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;pgnuplot&quot;<sp/>is<sp/>considered<sp/>deprecated<sp/>according<sp/>to<sp/>the<sp/>Internet.<sp/><sp/>It<sp/>may<sp/>be<sp/>faster.<sp/><sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>handle<sp/>binary<sp/>data<sp/>though.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//#<sp/>define<sp/>GNUPLOT_DEFAULT_COMMAND<sp/>&quot;pgnuplot<sp/>-persist&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>gnuplot<sp/>echos<sp/>commands<sp/>to<sp/>stderr.<sp/><sp/>So<sp/>we<sp/>forward<sp/>its<sp/>stderr<sp/>to<sp/>the<sp/>bit<sp/>bucket.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unfortunately,<sp/>this<sp/>means<sp/>you<sp/>will<sp/>miss<sp/>out<sp/>on<sp/>legitimate<sp/>error<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_DEFAULT_COMMAND<sp/>&quot;gnuplot<sp/>-persist<sp/>2&gt;<sp/>NUL&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>GNUPLOT_DEFAULT_COMMAND<sp/>&quot;gnuplot<sp/>-persist&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegnuplotio" kindref="compound">gnuplotio</ref><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Basic<sp/>traits<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>mechanisms<sp/>constructed<sp/>in<sp/>this<sp/>section<sp/>enable<sp/>us<sp/>to<sp/>detect<sp/>what<sp/>sort<sp/>of<sp/>datatype<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>been<sp/>passed<sp/>to<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>specialized<sp/>as<sp/>needed,<sp/>in<sp/>order<sp/>to<sp/>not<sp/>use<sp/>the<sp/>STL<sp/>interfaces<sp/>for<sp/>specific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="180" refid="structgnuplotio_1_1dont__treat__as__stl__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;false&gt;<sp/>type;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">BOOST_MPL_HAS_XXX_TRAIT_DEF(value_type)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">BOOST_MPL_HAS_XXX_TRAIT_DEF(const_iterator)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="188" refid="structgnuplotio_1_1is__like__stl__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1is__like__stl__container" kindref="compound">is_like_stl_container</ref><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_value_type&lt;T&gt;::type,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_const_iterator&lt;T&gt;::type,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::not_&lt;dont_treat_as_stl_container&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>type;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>type::value;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="198" refid="structgnuplotio_1_1is__boost__tuple__nulltype" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1is__boost__tuple__nulltype" kindref="compound">is_boost_tuple_nulltype</ref><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;value&gt;<sp/>type;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="204" refid="structgnuplotio_1_1is__boost__tuple__nulltype_3_01boost_1_1tuples_1_1null__type_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1is__boost__tuple__nulltype" kindref="compound">is_boost_tuple_nulltype</ref>&lt;boost::tuples::null_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;value&gt;<sp/>type;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">BOOST_MPL_HAS_XXX_TRAIT_DEF(head_type)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">BOOST_MPL_HAS_XXX_TRAIT_DEF(tail_type)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="213" refid="structgnuplotio_1_1is__boost__tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1is__boost__tuple" kindref="compound">is_boost_tuple</ref><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_head_type&lt;T&gt;::type,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>has_tail_type&lt;T&gt;::type</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/>type;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>type::value;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>More<sp/>fine-grained,<sp/>but<sp/>doesn&apos;t<sp/>compile!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;typename<sp/>T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//struct<sp/>is_boost_tuple<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>typedef<sp/>boost::mpl::and_&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>boost::is_class&lt;T&gt;::type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>boost::mpl::and_&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>has_head_type&lt;T&gt;::type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>boost::mpl::and_&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>has_tail_type&lt;T&gt;::type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>boost::mpl::or_&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;::type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>is_boost_tuple&lt;typename<sp/>T::tail_type&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>&gt;<sp/>type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//struct<sp/>is_boost_tuple&lt;boost::tuples::null_type&gt;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>typedef<sp/>boost::mpl::bool_&lt;false&gt;<sp/>type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Tmpfile<sp/>helper<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RAII<sp/>temporary<sp/>file.<sp/><sp/>File<sp/>is<sp/>removed<sp/>when<sp/>this<sp/>object<sp/>goes<sp/>out<sp/>of<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GnuplotTmpfile<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>GnuplotTmpfile()<sp/>:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file(boost::filesystem::unique_path(</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::temp_directory_path()<sp/>/</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tmp-gnuplot-%%%%-%%%%-%%%%-%%%%&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>noncopyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>GnuplotTmpfile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotTmpfile<sp/>&amp;);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotTmpfile&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotTmpfile<sp/>&amp;);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>~GnuplotTmpfile()<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>never<sp/>good<sp/>to<sp/>throw<sp/>exceptions<sp/>from<sp/>a<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(file);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>remove<sp/>temporary<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>file;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Feedback<sp/>helper<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>reading<sp/>stuff<sp/>sent<sp/>from<sp/>gnuplot<sp/>via<sp/>gnuplot&apos;s<sp/>&quot;print&quot;<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>this<sp/>is<sp/>used<sp/>for<sp/>capturing<sp/>mouse<sp/>clicks<sp/>in<sp/>the<sp/>gnuplot<sp/>window.<sp/><sp/>There<sp/>are<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementations,<sp/>only<sp/>the<sp/>first<sp/>of<sp/>which<sp/>is<sp/>complete.<sp/><sp/>The<sp/>first<sp/>implementation<sp/>allocates<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PTY<sp/>(pseudo<sp/>terminal)<sp/>which<sp/>is<sp/>written<sp/>to<sp/>by<sp/>gnuplot<sp/>and<sp/>read<sp/>by<sp/>us.<sp/><sp/>This<sp/>only<sp/>works<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linux.<sp/><sp/>The<sp/>second<sp/>implementation<sp/>creates<sp/>a<sp/>temporary<sp/>file<sp/>which<sp/>is<sp/>written<sp/>to<sp/>by<sp/>gnuplot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>read<sp/>by<sp/>us.<sp/><sp/>However,<sp/>this<sp/>doesn&apos;t<sp/>currently<sp/>work<sp/>since<sp/>fscanf<sp/>doesn&apos;t<sp/>block.<sp/><sp/>It<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>possible<sp/>to<sp/>get<sp/>this<sp/>working<sp/>using<sp/>a<sp/>more<sp/>complicated<sp/>mechanism<sp/>(select<sp/>or<sp/>threads)<sp/>but<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>haven&apos;t<sp/>had<sp/>the<sp/>need<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="classgnuplotio_1_1_gnuplot_feedback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>filename()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>FILE<sp/>*handle()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>noncopyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_ENABLE_PTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GNUPLOT_ENABLE_FEEDBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GnuplotFeedbackPty<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>GnuplotFeedbackPty(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug_messages)<sp/>:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pty_fn(),</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pty_fh(NULL),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>master_fd(-1),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave_fd(-1)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adapted<sp/>from<sp/>http://www.gnuplot.info/files/gpReadMouseTest.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>&gt;<sp/>openpty(&amp;master_fd,<sp/>&amp;slave_fd,<sp/>NULL,<sp/>NULL,<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;openpty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;openpty<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pty_fn_buf[1024];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ttyname_r(slave_fd,<sp/>pty_fn_buf,<sp/>1024))<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;ttyname_r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;ttyname<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pty_fn<sp/>=<sp/>std::string(pty_fn_buf);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_messages)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;feedback_fn=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pty_fn<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>echo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">termios<sp/>tios;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tcgetattr(slave_fd,<sp/>&amp;tios)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;tcgetattr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;tcgetattr<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tios.c_lflag<sp/>&amp;=<sp/>~(ECHO<sp/>|<sp/>ECHONL);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tcsetattr(slave_fd,<sp/>TCSAFLUSH,<sp/>&amp;tios)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;tcsetattr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;tcsetattr<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pty_fh<sp/>=<sp/>fdopen(master_fd,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!pty_fh)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;fdopen<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>noncopyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>GnuplotFeedbackPty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotFeedbackPty<sp/>&amp;);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotFeedbackPty&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GnuplotFeedbackPty<sp/>&amp;);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>~GnuplotFeedbackPty()<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pty_fh)<sp/>fclose(pty_fh);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(master_fd<sp/>&gt;<sp/>0)<sp/>::close(master_fd);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slave_fd<sp/><sp/>&gt;<sp/>0)<sp/>::close(slave_fd);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>filename()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pty_fn;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*handle()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pty_fh;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pty_fn;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*pty_fh;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>master_fd,<sp/>slave_fd;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">};</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//#elif<sp/>defined<sp/>GNUPLOT_USE_TMPFILE</highlight></codeline>
<codeline lineno="373"><highlight class="comment"></highlight><highlight class="comment">//#define<sp/>GNUPLOT_ENABLE_FEEDBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//class<sp/>GnuplotFeedbackTmpfile<sp/>:<sp/>public<sp/>GnuplotFeedback<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>explicit<sp/>GnuplotFeedbackTmpfile(bool<sp/>debug_messages)<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>tmp_file(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fh(NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>if(debug_messages)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;feedback_fn=&quot;<sp/>&lt;&lt;<sp/>filename()<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_PUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fh<sp/>=<sp/>std::fopen(filename().c_str(),<sp/>&quot;a&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_POP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>~GnuplotFeedbackTmpfile()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fclose(fh);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>//<sp/>noncopyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GnuplotFeedbackTmpfile(const<sp/>GnuplotFeedbackTmpfile<sp/>&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>const<sp/>GnuplotFeedbackTmpfile&amp;<sp/>operator=(const<sp/>GnuplotFeedbackTmpfile<sp/>&amp;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>std::string<sp/>filename()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tmp_file.file.string();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>FILE<sp/>*handle()<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fh;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//private:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>GnuplotTmpfile<sp/>tmp_file;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>FILE<sp/>*fh;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ENABLE_PTY,<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Traits<sp/>and<sp/>printers<sp/>for<sp/>entry<sp/>datatypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>section<sp/>contains<sp/>the<sp/>mechanisms<sp/>for<sp/>sending<sp/>scalar<sp/>and<sp/>tuple<sp/>data<sp/>to<sp/>gnuplot.<sp/><sp/>Pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>tuples<sp/>are<sp/>sent<sp/>by<sp/>appealing<sp/>to<sp/>the<sp/>senders<sp/>defined<sp/>for<sp/>their<sp/>component<sp/>scalar<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Senders<sp/>for<sp/>arrays<sp/>are<sp/>defined<sp/>in<sp/>a<sp/>later<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>three<sp/>classes<sp/>which<sp/>need<sp/>to<sp/>be<sp/>specialized<sp/>for<sp/>each<sp/>supported<sp/>datatype:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>TextSender<sp/>to<sp/>send<sp/>data<sp/>as<sp/>text.<sp/><sp/>The<sp/>default<sp/>is<sp/>to<sp/>just<sp/>send<sp/>using<sp/>the<sp/>ostream&apos;s<sp/>`&lt;&lt;`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>BinarySender<sp/>to<sp/>send<sp/>data<sp/>as<sp/>binary,<sp/>in<sp/>a<sp/>format<sp/>which<sp/>gnuplot<sp/>can<sp/>understand.<sp/><sp/>There<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>default<sp/>implementation<sp/>(unimplemented<sp/>types<sp/>raise<sp/>a<sp/>compile<sp/>time<sp/>error),<sp/>however</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inheriting<sp/>from<sp/>FlatBinarySender<sp/>will<sp/>send<sp/>the<sp/>data<sp/>literally<sp/>as<sp/>it<sp/>is<sp/>stored<sp/>in<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>suffices<sp/>for<sp/>most<sp/>of<sp/>the<sp/>standard<sp/>built-in<sp/>types<sp/>(e.g.<sp/>uint32_t<sp/>or<sp/>double).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>3.<sp/>BinfmtSender<sp/>sends<sp/>a<sp/>description<sp/>of<sp/>the<sp/>data<sp/>format<sp/>to<sp/>gnuplot<sp/>(e.g.<sp/>`%uint32`).<sp/><sp/>Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`show<sp/>datafile<sp/>binary<sp/>datasizes`<sp/>in<sp/>gnuplot<sp/>to<sp/>see<sp/>a<sp/>list<sp/>of<sp/>supported<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Basic<sp/>entry<sp/>datatypes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>TextSender,<sp/>sends<sp/>data<sp/>using<sp/>`&lt;&lt;`<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="433" refid="structgnuplotio_1_1_text_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>v;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>BinarySender,<sp/>raises<sp/>a<sp/>compile<sp/>time<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="441" refid="structgnuplotio_1_1_binary_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;BinarySender<sp/>class<sp/>not<sp/>specialized<sp/>for<sp/>this<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>here<sp/>to<sp/>avoid<sp/>further<sp/>compilation<sp/>errors,<sp/>beyond<sp/>what<sp/>the<sp/>assert<sp/>prints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>BinarySender<sp/>implementation<sp/>that<sp/>just<sp/>sends<sp/>directly<sp/>from<sp/>memory.<sp/><sp/>Data<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>can<sp/>be<sp/>sent<sp/>this<sp/>way<sp/>can<sp/>have<sp/>their<sp/>BinarySender<sp/>specialization<sp/>inherit<sp/>from<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="451" refid="structgnuplotio_1_1_flat_binary_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream.write(reinterpret_cast&lt;const<sp/>char<sp/>*&gt;(&amp;v),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal">};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Default<sp/>BinfmtSender,<sp/>raises<sp/>a<sp/>compile<sp/>time<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="459" refid="structgnuplotio_1_1_binfmt_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;BinfmtSender<sp/>class<sp/>not<sp/>specialized<sp/>for<sp/>this<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>here<sp/>to<sp/>avoid<sp/>further<sp/>compilation<sp/>errors,<sp/>beyond<sp/>what<sp/>the<sp/>assert<sp/>prints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">};</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BinfmtSender<sp/>implementations<sp/>for<sp/>basic<sp/>data<sp/>types<sp/>supported<sp/>by<sp/>gnuplot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types<sp/>from<sp/>boost/cstdint.hpp<sp/>are<sp/>used<sp/>because<sp/>VS2008<sp/>doesn&apos;t<sp/>have<sp/>stdint.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="structgnuplotio_1_1_binfmt_sender_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;<sp/>float&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%float&quot;</highlight><highlight class="normal">;<sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="469" refid="structgnuplotio_1_1_binfmt_sender_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;double&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%double&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="470" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int8__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::<sp/><sp/>int8_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%int8&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="471" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint8__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::<sp/>uint8_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%uint8&quot;</highlight><highlight class="normal">;<sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="472" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int16__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::<sp/>int16_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%int16&quot;</highlight><highlight class="normal">;<sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="473" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint16__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::uint16_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%uint16&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="474" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int32__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::<sp/>int32_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%int32&quot;</highlight><highlight class="normal">;<sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="475" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint32__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::uint32_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%uint32&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="476" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1int64__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::<sp/>int64_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%int64&quot;</highlight><highlight class="normal">;<sp/><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="477" refid="structgnuplotio_1_1_binfmt_sender_3_01boost_1_1uint64__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;boost::uint64_t&gt;<sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%uint64&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BinarySender<sp/>implementations<sp/>for<sp/>basic<sp/>data<sp/>types<sp/>supported<sp/>by<sp/>gnuplot.<sp/><sp/>These<sp/>types<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>be<sp/>sent<sp/>as<sp/>stored<sp/>in<sp/>memory,<sp/>so<sp/>all<sp/>these<sp/>senders<sp/>inherit<sp/>from<sp/>FlatBinarySender.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="structgnuplotio_1_1_binary_sender_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;<sp/>float&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;<sp/>float&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="482" refid="structgnuplotio_1_1_binary_sender_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;double&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;double&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="483" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int8__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::<sp/><sp/>int8_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::<sp/><sp/>int8_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="484" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint8__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::<sp/>uint8_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::<sp/>uint8_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="485" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int16__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::<sp/>int16_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::<sp/>int16_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="486" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint16__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::uint16_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::uint16_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="487" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int32__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::<sp/>int32_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::<sp/>int32_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="488" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint32__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::uint32_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::uint32_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="489" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1int64__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::<sp/>int64_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::<sp/>int64_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="490" refid="structgnuplotio_1_1_binary_sender_3_01boost_1_1uint64__t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;boost::uint64_t&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_flat_binary_sender" kindref="compound">FlatBinarySender</ref>&lt;boost::uint64_t&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>char<sp/>types<sp/>print<sp/>as<sp/>integers,<sp/>not<sp/>as<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="494" refid="structgnuplotio_1_1_cast_int_text_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_cast_int_text_sender" kindref="compound">CastIntTextSender</ref><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>int(v);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal">};</highlight></codeline>
<codeline lineno="499" refid="structgnuplotio_1_1_text_sender_3_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_cast_int_text_sender" kindref="compound">CastIntTextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="500" refid="structgnuplotio_1_1_text_sender_3_01signed_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;<sp/><sp/><sp/>signed<sp/>char&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_cast_int_text_sender" kindref="compound">CastIntTextSender</ref>&lt;<sp/><sp/><sp/>signed<sp/>char&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="501" refid="structgnuplotio_1_1_text_sender_3_01unsigned_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;<sp/>unsigned<sp/>char&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_cast_int_text_sender" kindref="compound">CastIntTextSender</ref>&lt;<sp/>unsigned<sp/>char&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>same<sp/>not-a-number<sp/>string<sp/>is<sp/>printed<sp/>on<sp/>all<sp/>platforms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="505" refid="structgnuplotio_1_1_float_text_sender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_float_text_sender" kindref="compound">FloatTextSender</ref><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(GNUPLOT_ISNAN(v))<sp/>{<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nan&quot;</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>stream<sp/>&lt;&lt;<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="510" refid="structgnuplotio_1_1_text_sender_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>:<sp/><ref refid="structgnuplotio_1_1_float_text_sender" kindref="compound">FloatTextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/><sp/>float&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="511" refid="structgnuplotio_1_1_text_sender_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>:<sp/><ref refid="structgnuplotio_1_1_float_text_sender" kindref="compound">FloatTextSender</ref>&lt;<sp/><sp/><sp/><sp/><sp/>double&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="512" refid="structgnuplotio_1_1_text_sender_3_01long_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;long<sp/>double&gt;<sp/>:<sp/><ref refid="structgnuplotio_1_1_float_text_sender" kindref="compound">FloatTextSender</ref>&lt;long<sp/>double&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>std::pair<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="519" refid="structgnuplotio_1_1_text_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;std::pair&lt;T,<sp/>U&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,<sp/>U&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;T&gt;::send</ref>(stream,<sp/>v.first);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;U&gt;::send</ref>(stream,<sp/>v.second);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal">};</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="528" refid="structgnuplotio_1_1_binfmt_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;std::pair&lt;T,<sp/>U&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;T&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;U&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">};</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="536" refid="structgnuplotio_1_1_binary_sender_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;std::pair&lt;T,<sp/>U&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,<sp/>U&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;T&gt;::send</ref>(stream,<sp/>v.first);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;U&gt;::send</ref>(stream,<sp/>v.second);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal">};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>std::complex<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="548" refid="structgnuplotio_1_1_text_sender_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;T&gt;::send</ref>(stream,<sp/>v.real());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;T&gt;::send</ref>(stream,<sp/>v.imag());</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="557" refid="structgnuplotio_1_1_binfmt_sender_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;T&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;T&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal">};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="565" refid="structgnuplotio_1_1_binary_sender_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;std::complex&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;T&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;T&gt;::send</ref>(stream,<sp/>v.real());</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;T&gt;::send</ref>(stream,<sp/>v.imag());</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal">};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>boost::tuple<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="577" refid="structgnuplotio_1_1_text_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ad1ac3a3da167856c52be6ae54ba2c114" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;T,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::not_&lt;is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="584"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;typename T::head_type&gt;::send</ref>(stream,<sp/>v.get_head());</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;typename T::tail_type&gt;::send</ref>(stream,<sp/>v.get_tail());</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal">};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="593" refid="structgnuplotio_1_1_text_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ab6d6864cc1b3ed233c9f15134694f953" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;T,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="600"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;typename T::head_type&gt;::send</ref>(stream,<sp/>v.get_head());</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal">};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="607" refid="structgnuplotio_1_1_binfmt_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_e9270e5cb86823566a0af3940aa51061" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;T,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::not_&lt;is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="614"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;typename T::head_type&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;typename T::tail_type&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">};</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="623" refid="structgnuplotio_1_1_binfmt_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_8c86f170c2e2969f5519817e5c367132" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;T,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="630"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;typename T::head_type&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="637" refid="structgnuplotio_1_1_binary_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_916ff7a758aa0b8917fd3b30ff275f06" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;T,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::not_&lt;is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="644"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;typename T::head_type&gt;::send</ref>(stream,<sp/>v.get_head());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;typename T::tail_type&gt;::send</ref>(stream,<sp/>v.get_tail());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">};</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="652" refid="structgnuplotio_1_1_binary_sender_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_29e1098ca8b7afc20f2ca0bc2e79506a" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;T,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="659"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;typename T::head_type&gt;::send</ref>(stream,<sp/>v.get_head());</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal">};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>std::tuple<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://stackoverflow.com/questions/6245735/pretty-print-stdtuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">int_{};<sp/></highlight><highlight class="comment">//<sp/>compile-time<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_formatcode_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>*,<sp/>int_&lt;I&gt;)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>std_tuple_formatcode_helper(stream,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>*)(0),<sp/>int_&lt;I-1&gt;());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;typename std::tuple_element&lt;I, Tuple&gt;::type</ref>&gt;::send(stream);</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_formatcode_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>*,<sp/>int_&lt;0&gt;)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;typename std::tuple_element&lt;0, Tuple&gt;::type</ref>&gt;::send(stream);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;std::tuple&lt;Args...&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;<sp/>Tuple;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_tuple_formatcode_helper(stream,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>*)(0),<sp/>int_&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)-1&gt;());</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal">};</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_textsend_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v,<sp/>int_&lt;I&gt;)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>std_tuple_textsend_helper(stream,<sp/>v,<sp/>int_&lt;I-1&gt;());</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;typename std::tuple_element&lt;I, Tuple&gt;::type</ref>&gt;::send(stream,<sp/>std::get&lt;I&gt;(v));</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_textsend_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v,<sp/>int_&lt;0&gt;)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;typename std::tuple_element&lt;0, Tuple&gt;::type</ref>&gt;::send(stream,<sp/>std::get&lt;0&gt;(v));</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;std::tuple&lt;Args...&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;<sp/>Tuple;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_tuple_textsend_helper(stream,<sp/>v,<sp/>int_&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)-1&gt;());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal">};</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_binsend_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v,<sp/>int_&lt;I&gt;)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>std_tuple_binsend_helper(stream,<sp/>v,<sp/>int_&lt;I-1&gt;());</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;typename std::tuple_element&lt;I, Tuple&gt;::type</ref>&gt;::send(stream,<sp/>std::get&lt;I&gt;(v));</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>std_tuple_binsend_helper(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v,<sp/>int_&lt;0&gt;)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;typename std::tuple_element&lt;0, Tuple&gt;::type</ref>&gt;::send(stream,<sp/>std::get&lt;0&gt;(v));</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;std::tuple&lt;Args...&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;<sp/>Tuple;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std_tuple_binsend_helper(stream,<sp/>v,<sp/>int_&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)-1&gt;());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>ArrayTraits<sp/>and<sp/>Range<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>section<sp/>handles<sp/>sending<sp/>of<sp/>array<sp/>data<sp/>to<sp/>gnuplot.<sp/><sp/>It<sp/>is<sp/>rather<sp/>complicated<sp/>because<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>diversity<sp/>of<sp/>storage<sp/>schemes<sp/>supported.<sp/><sp/>For<sp/>example,<sp/>it<sp/>treats<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`std::pair&lt;std::vector&lt;T&gt;,<sp/>std::vector&lt;U&gt;&gt;`<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`std::vector&lt;std::pair&lt;T,<sp/>U&gt;&gt;`,<sp/>iterating<sp/>through<sp/>the<sp/>two<sp/>arrays<sp/>in<sp/>lockstep,<sp/>and<sp/>sending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pairs<sp/>&lt;T,U&gt;<sp/>to<sp/>gnuplot<sp/>as<sp/>columns.<sp/><sp/>In<sp/>fact,<sp/>any<sp/>nested<sp/>combination<sp/>of<sp/>pairs,<sp/>tuples,<sp/>STL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>containers,<sp/>Blitz<sp/>arrays,<sp/>and<sp/>Armadillo<sp/>arrays<sp/>is<sp/>supported<sp/>(with<sp/>the<sp/>caveat<sp/>that,<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instance,<sp/>Blitz<sp/>arrays<sp/>should<sp/>never<sp/>be<sp/>put<sp/>into<sp/>an<sp/>STL<sp/>container<sp/>or<sp/>you<sp/>will<sp/>suffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unpredictable<sp/>results<sp/>due<sp/>the<sp/>way<sp/>Blitz<sp/>handles<sp/>assignment).<sp/><sp/>Nested<sp/>containers<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>considered<sp/>to<sp/>be<sp/>multidimensional<sp/>arrays.<sp/><sp/>Although<sp/>gnuplot<sp/>only<sp/>supports<sp/>1D<sp/>and<sp/>2D<sp/>arrays,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>module<sp/>is<sp/>in<sp/>principle<sp/>not<sp/>limited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ArrayTraits<sp/>class<sp/>is<sp/>specialized<sp/>for<sp/>every<sp/>supported<sp/>array<sp/>or<sp/>container<sp/>type<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default,<sp/>unspecialized,<sp/>version<sp/>of<sp/>ArrayTraits<sp/>exists<sp/>only<sp/>to<sp/>tell<sp/>you<sp/>that<sp/>something<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*not*<sp/>a<sp/>container,<sp/>via<sp/>the<sp/>is_container<sp/>flag).<sp/><sp/>ArrayTraits<sp/>tells<sp/>you<sp/>the<sp/>depth<sp/>of<sp/>a<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(or<sp/>multidimensional)<sp/>container,<sp/>as<sp/>well<sp/>as<sp/>the<sp/>value<sp/>type,<sp/>and<sp/>provides<sp/>a<sp/>specialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sort<sp/>of<sp/>iterator<sp/>(a.k.a.<sp/>&quot;range&quot;).<sp/><sp/>Ranges<sp/>are<sp/>sort<sp/>of<sp/>like<sp/>STL<sp/>iterators,<sp/>except<sp/>that<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>built-in<sp/>knowledge<sp/>of<sp/>the<sp/>end<sp/>condition<sp/>so<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/>carry<sp/>around<sp/>both<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>begin()<sp/>and<sp/>an<sp/>end()<sp/>iterator<sp/>like<sp/>in<sp/>STL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>an<sp/>example<sp/>of<sp/>how<sp/>this<sp/>works,<sp/>consider<sp/>a<sp/>std::pair<sp/>of<sp/>std::vectors.<sp/><sp/>Ultimately<sp/>this<sp/>gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sent<sp/>to<sp/>gnuplot<sp/>as<sp/>two<sp/>columns,<sp/>so<sp/>the<sp/>two<sp/>vectors<sp/>need<sp/>to<sp/>be<sp/>iterated<sp/>in<sp/>lockstep.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>`value_type`<sp/>of<sp/>`std::pair&lt;std::vector&lt;T&gt;,<sp/>std::vector&lt;U&gt;&gt;`<sp/>is<sp/>then<sp/>`std::pair&lt;T,<sp/>U&gt;`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>is<sp/>what<sp/>deferencing<sp/>the<sp/>range<sp/>(iterator)<sp/>gives.<sp/><sp/>Internally,<sp/>this<sp/>range<sp/>is<sp/>built</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>a<sp/>pair<sp/>of<sp/>ranges<sp/>(PairOfRange<sp/>class),<sp/>the<sp/>`inc()`<sp/>(advance<sp/>to<sp/>next<sp/>element)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>method<sp/>calls<sp/>`inc()`<sp/>on<sp/>each<sp/>of<sp/>the<sp/>children,<sp/>and<sp/>`deref()`<sp/>calls<sp/>`deref()`<sp/>on<sp/>each<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>combines<sp/>the<sp/>results<sp/>to<sp/>return<sp/>a<sp/>`std::pair`.<sp/><sp/>Tuples<sp/>are<sp/>handled<sp/>as<sp/>nested<sp/>pairs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>addition<sp/>to<sp/>PairOfRange,<sp/>there<sp/>is<sp/>also<sp/>a<sp/>VecOfRange<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>treat<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outermost<sp/>part<sp/>of<sp/>a<sp/>nested<sp/>container<sp/>as<sp/>if<sp/>it<sp/>were<sp/>a<sp/>tuple.<sp/><sp/>Since<sp/>tuples<sp/>are<sp/>printed<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>columns,<sp/>this<sp/>is<sp/>like<sp/>treating<sp/>a<sp/>multidimensional<sp/>array<sp/>as<sp/>if<sp/>it<sp/>were<sp/>column-major.<sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VecOfRange<sp/>is<sp/>obtained<sp/>by<sp/>calling<sp/>`get_columns_range`.<sp/><sp/>This<sp/>is<sp/>used<sp/>by,<sp/>for<sp/>instance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`send1d_colmajor`.<sp/><sp/>The<sp/>implementation<sp/>is<sp/>similar<sp/>to<sp/>that<sp/>of<sp/>PairOfRange.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>range,<sp/>accessed<sp/>via<sp/>`ArrayTraits&lt;T&gt;::get_range`,<sp/>will<sp/>be<sp/>of<sp/>a<sp/>different<sp/>class<sp/>depending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>T,<sp/>and<sp/>this<sp/>is<sp/>defined<sp/>by<sp/>the<sp/>ArrayTraits<sp/>specialization<sp/>for<sp/>T.<sp/><sp/>It<sp/>will<sp/>always<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>`inc()`<sp/>to<sp/>advance<sp/>to<sp/>the<sp/>next<sp/>element<sp/>and<sp/>`is_end()`<sp/>for<sp/>checking<sp/>whether<sp/>one<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>advanced<sp/>past<sp/>the<sp/>final<sp/>element.<sp/><sp/>For<sp/>nested<sp/>containers,<sp/>`deref_subiter()`<sp/>returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator<sp/>for<sp/>the<sp/>next<sp/>nesting<sp/>level.<sp/><sp/>When<sp/>at<sp/>the<sp/>innermost<sp/>level<sp/>of<sp/>nesting,<sp/>`deref()`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>entry<sp/>the<sp/>iterator<sp/>points<sp/>to<sp/>(a<sp/>scalar,<sp/>pair,<sp/>or<sp/>tuple).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>one<sp/>of<sp/>`deref()`<sp/>or<sp/>`deref_subiter()`<sp/>will<sp/>be<sp/>available,<sp/>depending<sp/>on<sp/>whether<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deeper<sp/>levels<sp/>of<sp/>nesting.<sp/><sp/>The<sp/>typedefs<sp/>`value_type`<sp/>and<sp/>`subiter_type`<sp/>tell<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types<sp/>of<sp/>these<sp/>two<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Support<sp/>for<sp/>standard<sp/>C++<sp/>and<sp/>boost<sp/>containers<sp/>and<sp/>tuples<sp/>of<sp/>containers<sp/>is<sp/>provided<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>section.<sp/><sp/>Support<sp/>for<sp/>third<sp/>party<sp/>packages<sp/>like<sp/>Blitz<sp/>and<sp/>Armadillo<sp/>is<sp/>in<sp/>a<sp/>later<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>ArrayTraits<sp/>generic<sp/>class<sp/>and<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>messages<sp/>involving<sp/>this<sp/>stem<sp/>from<sp/>treating<sp/>something<sp/>that<sp/>was<sp/>not<sp/>a<sp/>container<sp/>as<sp/>if<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>was.<sp/><sp/>This<sp/>is<sp/>only<sp/>here<sp/>to<sp/>allow<sp/>compiliation<sp/>without<sp/>errors<sp/>in<sp/>normal<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="structgnuplotio_1_1_error___was_not_container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>just<sp/>here<sp/>to<sp/>make<sp/>VC++<sp/>happy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://connect.microsoft.com/VisualStudio/feedback/details/777612/class-template-specialization-that-compiles-in-g-but-not-visual-c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subiter_type;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">};</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>messages<sp/>involving<sp/>this<sp/>stem<sp/>from<sp/>calling<sp/>deref<sp/>instead<sp/>of<sp/>deref_subiter<sp/>for<sp/>a<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="structgnuplotio_1_1_error___inappropriate_deref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_error___inappropriate_deref" kindref="compound">Error_InappropriateDeref</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>unspecialized<sp/>version<sp/>of<sp/>this<sp/>class<sp/>gives<sp/>traits<sp/>for<sp/>things<sp/>that<sp/>are<sp/>*not*<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="807" refid="classgnuplotio_1_1_array_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>value<sp/>type<sp/>of<sp/>elements<sp/>after<sp/>all<sp/>levels<sp/>of<sp/>nested<sp/>containers<sp/>have<sp/>been<sp/>dereferenced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">value_type</ref>;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>the<sp/>range<sp/>(a.k.a.<sp/>iterator)<sp/>that<sp/>`get_range()`<sp/>returns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">range_type</ref>;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>whether<sp/>T<sp/>is<sp/>in<sp/>fact<sp/>a<sp/>container<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>supports<sp/>the<sp/>legacy<sp/>behavior<sp/>of<sp/>automatically<sp/>guessing<sp/>whether<sp/>the<sp/>data<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>treated<sp/>as<sp/>column<sp/>major.<sp/><sp/>This<sp/>guessing<sp/>happens<sp/>when<sp/>`send()`<sp/>is<sp/>called<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`send1d()`<sp/>or<sp/>`send2d()`.<sp/><sp/>This<sp/>is<sp/>deprecated,<sp/>but<sp/>is<sp/>still<sp/>supported<sp/>for<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>levels<sp/>of<sp/>nesting,<sp/>or<sp/>the<sp/>dimension<sp/>of<sp/>multidimensional<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>range<sp/>(iterator)<sp/>for<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)==0),<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>was<sp/>not<sp/>a<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal">};</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/>specializations<sp/>of<sp/>ArrayTraits<sp/>should<sp/>inherit<sp/>from<sp/>this<sp/>(with<sp/>V<sp/>set<sp/>to<sp/>the<sp/>value<sp/>type).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>sets<sp/>some<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="833" refid="classgnuplotio_1_1_array_traits_defaults" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>V<sp/>value_type;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;V&gt;::depth</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="840"><highlight class="normal">};</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>handles<sp/>reference<sp/>types,<sp/>such<sp/>as<sp/>are<sp/>given<sp/>with<sp/>boost::tie.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>also<sp/>allows<sp/>for<sp/>instance<sp/>&quot;ArrayTraits&lt;T[N]&gt;&quot;<sp/>to<sp/>match<sp/>&quot;ArrayTraits&lt;T<sp/>(&amp;)<sp/>[N]&gt;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>this<sp/>is<sp/>okay<sp/>to<sp/>do...<sp/>The<sp/>alternative<sp/>is<sp/>to<sp/>use<sp/>remove_reference<sp/>all<sp/>over<sp/>the<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="846" refid="classgnuplotio_1_1_array_traits_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>is<sp/>this<sp/>okay?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>supports<sp/>gp.send1d(std::forward_as_tuple(x,<sp/>std::move(y)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T&amp;&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>STL<sp/>container<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TI,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TV&gt;</highlight></codeline>
<codeline lineno="860" refid="classgnuplotio_1_1_iterator_range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange</ref><sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TI<sp/>&amp;_it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TI<sp/>&amp;_end)<sp/>:<sp/>it(_it),<sp/>end(_end)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;TV&gt;::is_container</ref>;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::mpl::if_c&lt;is_container,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_error___inappropriate_deref" kindref="compound">Error_InappropriateDeref</ref>,<sp/>TV&gt;::type<sp/>value_type;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;TV&gt;::range_type</ref><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">subiter_type</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>==<sp/>end;<sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++it;<sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TV)<sp/>&amp;&amp;<sp/>!is_container,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;deref<sp/>called<sp/>on<sp/>nested<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_end())<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;attepted<sp/>to<sp/>dereference<sp/>past<sp/>end<sp/>of<sp/>iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TV)<sp/>&amp;&amp;<sp/>is_container,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;deref_subiter<sp/>called<sp/>on<sp/>non-nested<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(is_end())<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;attepted<sp/>to<sp/>dereference<sp/>past<sp/>end<sp/>of<sp/>iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;TV&gt;::get_range</ref>(*it);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>TI<sp/>it,<sp/>end;</highlight></codeline>
<codeline lineno="894"><highlight class="normal">};</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="897" refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01is__like__stl__co9e1736bbd08cd58c6993ab613a998887" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;is_like_stl_container&lt;T&gt;<sp/>&gt;::type</highlight></codeline>
<codeline lineno="899"><highlight class="normal">&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;typename<sp/>T::value_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange&lt;typename T::const_iterator, typename T::value_type&gt;</ref><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">range_type</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(arg.begin(),<sp/>arg.end());</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal">};</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>C<sp/>style<sp/>array<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="913" refid="classgnuplotio_1_1_array_traits_3_01_t[_n]_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T[N]&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange&lt;const T*, T&gt;</ref><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">range_type</ref>;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;arg)[N])<sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(arg,<sp/>arg+N);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal">};</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>std::pair<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RU&gt;</highlight></codeline>
<codeline lineno="927" refid="classgnuplotio_1_1_pair_of_range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange</ref><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deref_and_print(std::ostream<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange&lt;T, U&gt;</ref><sp/>&amp;,<sp/>PrintMode);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RT<sp/>&amp;_l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RU<sp/>&amp;_r)<sp/>:<sp/>l(_l),<sp/>r(_r)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/>RT::is_container<sp/>&amp;&amp;<sp/>RU::is_container;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;typename<sp/>RT::value_type,<sp/>typename<sp/>RU::value_type&gt;<sp/>value_type;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange&lt;typename RT::subiter_type, typename RU::subiter_type&gt;</ref><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">subiter_type</ref>;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>el<sp/>=<sp/>l.is_end();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>er<sp/>=<sp/>r.is_end();</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(el<sp/>!=<sp/>er)<sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::length_error(</highlight><highlight class="stringliteral">&quot;columns<sp/>were<sp/>different<sp/>lengths&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>el;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.inc();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.inc();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(l.deref(),<sp/>r.deref());</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subiter_type(l.deref_subiter(),<sp/>r.deref_subiter());</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>RT<sp/>l;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>RU<sp/>r;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">};</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="968" refid="classgnuplotio_1_1_array_traits_3_01std_1_1pair_3_01_t_00_01_u_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;std::pair&lt;T,<sp/>U&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange&lt;typename ArrayTraits&lt;T&gt;::range_type</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;U&gt;::range_type</ref>&gt;<sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">range_type</ref>;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;typename<sp/>ArrayTraits&lt;T&gt;::value_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;U&gt;::value_type</ref>&gt;<sp/>value_type;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::is_container</ref><sp/>&amp;&amp;<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;U&gt;::is_container</ref>;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>allow<sp/>colwrap<sp/>since<sp/>it&apos;s<sp/>already<sp/>wrapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>allowed<sp/>for<sp/>l_depth<sp/>!=<sp/>r_depth,<sp/>for<sp/>example<sp/>one<sp/>column<sp/>could<sp/>be<sp/>&apos;double&apos;<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>column<sp/>could<sp/>be<sp/>&apos;vector&lt;double&gt;&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r_depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;U&gt;::depth</ref>;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>(l_depth<sp/>&lt;<sp/>r_depth)<sp/>?<sp/>l_depth<sp/>:<sp/>r_depth;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T,<sp/>U&gt;<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::get_range</ref>(arg.first),</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;U&gt;::get_range</ref>(arg.second)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal">};</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>boost::tuple<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="994" refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1a8de3a8fe198d85f7f5d28b9a2f5bf229" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::not_&lt;is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>std::pair&lt;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>T::head_type,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>T::tail_type</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::head_type<sp/>HT;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::tail_type<sp/>TT;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;typename std::pair&lt;HT, TT&gt;</ref><sp/>&gt;<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">parent</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">parent::range_type</ref><sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">parent::range_type</ref>(</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;HT&gt;::get_range</ref>(arg.get_head()),</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;TT&gt;::get_range</ref>(arg.get_tail())</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1022" refid="classgnuplotio_1_1_array_traits_3_01_t_00_01typename_01boost_1_1enable__if_3_01boost_1_1mpl_1_1ad3fa8e75dccbaae12a06d17831678a88" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if&lt;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mpl::and_&lt;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple&lt;T&gt;,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_boost_tuple_nulltype&lt;typename<sp/>T::tail_type&gt;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>T::head_type</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">&gt;<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::head_type<sp/>HT;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;HT&gt;</ref><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">parent</ref>;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">parent::range_type</ref><sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent::get_range(arg.get_head());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>std::tuple<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">x&gt;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StdTupUnwinder<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StdTupUnwinder&lt;Tuple,<sp/>idx-1&gt;::type,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;idx,<sp/>Tuple&gt;::type</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<sp/>type;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;type&gt;::range_type</ref><sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;type&gt;::range_type</ref>(</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StdTupUnwinder&lt;Tuple,<sp/>idx-1&gt;::get_range(arg),</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;idx,<sp/>Tuple&gt;::type&gt;::get_range(std::get&lt;idx&gt;(arg))</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StdTupUnwinder&lt;Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;0,<sp/>Tuple&gt;::type<sp/>type;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">ArrayTraits&lt;type&gt;::range_type</ref><sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;type&gt;::get_range</ref>(std::get&lt;0&gt;(arg));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;std::tuple&lt;Args...&gt;<sp/>&gt;<sp/>:</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;typename<sp/>StdTupUnwinder&lt;std::tuple&lt;Args...&gt;,<sp/>sizeof...(Args)-1&gt;::type&gt;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::tuple&lt;Args...&gt;<sp/>Tuple;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StdTupUnwinder&lt;Tuple,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)-1&gt;::type&gt;<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">parent</ref>;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">parent::range_type</ref><sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdTupUnwinder&lt;std::tuple&lt;Args...&gt;,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)-1&gt;::get_range(arg);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ENABLE_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Support<sp/>column<sp/>unwrap<sp/>of<sp/>container<sp/>(VecOfRange)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VecOfRange<sp/>(created<sp/>via<sp/>`get_columns_range()`)<sp/>treats<sp/>the<sp/>outermost<sp/>level<sp/>of<sp/>a<sp/>nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>container<sp/>as<sp/>if<sp/>it<sp/>were<sp/>a<sp/>tuple.<sp/><sp/>Since<sp/>tuples<sp/>are<sp/>sent<sp/>to<sp/>gnuplot<sp/>as<sp/>columns,<sp/>this<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>effect<sp/>of<sp/>addressing<sp/>a<sp/>multidimensional<sp/>array<sp/>in<sp/>column<sp/>major<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RT&gt;</highlight></codeline>
<codeline lineno="1096" refid="classgnuplotio_1_1_vec_of_range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange</ref><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deref_and_print(std::ostream<sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;T&gt;</ref><sp/>&amp;,<sp/>PrintMode);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange</ref>()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RT&gt;<sp/>&amp;_rvec)<sp/>:<sp/>rvec(_rvec)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/>RT::is_container;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>allow<sp/>colwrap<sp/>since<sp/>it&apos;s<sp/>already<sp/>wrapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;typename<sp/>RT::value_type&gt;<sp/>value_type;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;typename RT::subiter_type&gt;</ref><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">subiter_type</ref>;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rvec.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>rvec[0].is_end();</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;rvec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>!=<sp/>rvec[i].is_end())<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::length_error(</highlight><highlight class="stringliteral">&quot;columns<sp/>were<sp/>different<sp/>lengths&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;rvec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvec[i].inc();</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>ret(rvec.size());</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;rvec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[i]<sp/>=<sp/>rvec[i].deref();</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;typename<sp/>RT::subiter_type&gt;<sp/>subvec(rvec.size());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;rvec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subvec[i]<sp/>=<sp/>rvec[i].deref_subiter();</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subiter_type(subvec);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RT&gt;<sp/>rvec;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;typename ArrayTraits&lt;T&gt;::range_type::subiter_type</ref>&gt;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">get_columns_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::range_type::subiter_type</ref><sp/>U;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;U&gt;<sp/>rvec;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::range_type</ref><sp/>outer<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::get_range</ref>(arg);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!outer.is_end())<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvec.push_back(outer.deref_subiter());</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outer.inc();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;U&gt;</ref><sp/>ret(rvec);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Array<sp/>printing<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>section<sp/>coordinates<sp/>the<sp/>sending<sp/>of<sp/>data<sp/>to<sp/>gnuplot.<sp/><sp/>The<sp/>ArrayTraits<sp/>mechanism<sp/>tells<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>about<sp/>nested<sp/>containers<sp/>and<sp/>provides<sp/>iterators<sp/>over<sp/>them.<sp/><sp/>Here<sp/>we<sp/>make<sp/>use<sp/>of<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deciding<sp/>what<sp/>dimensions<sp/>should<sp/>be<sp/>treated<sp/>as<sp/>rows,<sp/>columns,<sp/>or<sp/>blocks,<sp/>telling<sp/>gnuplot<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>the<sp/>array<sp/>if<sp/>needed,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>set,<sp/>then<sp/>text-mode<sp/>data<sp/>will<sp/>be<sp/>sent<sp/>in<sp/>a<sp/>format<sp/>that<sp/>is<sp/>not<sp/>compatible<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gnuplot,<sp/>but<sp/>which<sp/>helps<sp/>the<sp/>programmer<sp/>tell<sp/>what<sp/>the<sp/>library<sp/>is<sp/>thinking.<sp/><sp/>Basically<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>puts<sp/>brackets<sp/>around<sp/>groups<sp/>of<sp/>items<sp/>and<sp/>puts<sp/>a<sp/>message<sp/>delineating<sp/>blocks<sp/>of<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug_array_print<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>thrown<sp/>when<sp/>an<sp/>empty<sp/>container<sp/>is<sp/>being<sp/>plotted.<sp/><sp/>This<sp/>exception<sp/>should<sp/>always</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>caught<sp/>and<sp/>should<sp/>not<sp/>propagate<sp/>to<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180" refid="classgnuplotio_1_1plotting__empty__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::length_error<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>()<sp/>:<sp/>std::length_error(</highlight><highlight class="stringliteral">&quot;plotting<sp/>empty<sp/>container&quot;</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Tags<sp/>(like<sp/>enums<sp/>for<sp/>metaprogramming)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>tags<sp/>define<sp/>what<sp/>our<sp/>goal<sp/>is,<sp/>what<sp/>sort<sp/>of<sp/>thing<sp/>should<sp/>ultimately<sp/>be<sp/>sent<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ostream.<sp/><sp/>These<sp/>tags<sp/>are<sp/>passed<sp/>to<sp/>the<sp/>PrintMode<sp/>template<sp/>argument<sp/>of<sp/>the<sp/>functions<sp/>in<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ModeText<sp/><sp/><sp/>-<sp/>Sends<sp/>the<sp/>data<sp/>in<sp/>an<sp/>array<sp/>in<sp/>text<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ModeBinary<sp/>-<sp/>Sends<sp/>the<sp/>data<sp/>in<sp/>an<sp/>array<sp/>in<sp/>binary<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ModeBinfmt<sp/>-<sp/>Sends<sp/>the<sp/>gnuplot<sp/>format<sp/>code<sp/>for<sp/>binary<sp/>data<sp/>(e.g.<sp/>&quot;%double%double&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ModeSize<sp/><sp/><sp/>-<sp/>Sends<sp/>the<sp/>size<sp/>of<sp/>an<sp/>array.<sp/><sp/>Needed<sp/>when<sp/>sending<sp/>binary<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195" refid="structgnuplotio_1_1_mode_text" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_text" kindref="compound">ModeText</ref><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_text<sp/>=<sp/>1;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_binfmt<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_size<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1196" refid="structgnuplotio_1_1_mode_binary" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_binary" kindref="compound">ModeBinary</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_text<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_binfmt<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_size<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1197" refid="structgnuplotio_1_1_mode_binfmt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_binfmt" kindref="compound">ModeBinfmt</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_text<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_binfmt<sp/>=<sp/>1;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_size<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="1198" refid="structgnuplotio_1_1_mode_size" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_size" kindref="compound">ModeSize</ref><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_text<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_binfmt<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_size<sp/>=<sp/>1;<sp/>};</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Whether<sp/>to<sp/>treat<sp/>the<sp/>outermost<sp/>level<sp/>of<sp/>a<sp/>nested<sp/>container<sp/>as<sp/>columns<sp/>(column<sp/>major<sp/>mode).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="structgnuplotio_1_1_col_unwrap_no" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_col_unwrap_no" kindref="compound">ColUnwrapNo</ref><sp/><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1202" refid="structgnuplotio_1_1_col_unwrap_yes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_col_unwrap_yes" kindref="compound">ColUnwrapYes</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>must<sp/>give<sp/>a<sp/>hint<sp/>to<sp/>describe<sp/>how<sp/>nested<sp/>containers<sp/>are<sp/>to<sp/>be<sp/>interpreted.<sp/><sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>done<sp/>by<sp/>calling<sp/>e.g.<sp/>`send1d_colmajor()`<sp/>or<sp/>`send2d()`.<sp/><sp/>This<sp/>hint<sp/>is<sp/>then<sp/>described<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>following<sp/>tags.<sp/><sp/>This<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>OrganizationMode<sp/>template<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207" refid="structgnuplotio_1_1_mode1_d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>class_name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mode1D&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1208" refid="structgnuplotio_1_1_mode2_d" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>class_name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mode2D&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1209" refid="structgnuplotio_1_1_mode1_d_unwrap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>class_name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mode1DUnwrap&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1210" refid="structgnuplotio_1_1_mode2_d_unwrap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>class_name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mode2DUnwrap&quot;</highlight><highlight class="normal">;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Support<sp/>for<sp/>the<sp/>legacy<sp/>behavior<sp/>that<sp/>guesses<sp/>which<sp/>of<sp/>the<sp/>above<sp/>four<sp/>modes<sp/>should<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="structgnuplotio_1_1_mode_auto" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>class_name()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ModeAuto&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>ModeAutoDecoder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ModeAuto<sp/>guesses<sp/>which<sp/>of<sp/>Mode1D,<sp/>Mode2D,<sp/>Mode1DUnwrap,<sp/>or<sp/>Mode2DUnwrap<sp/>should<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>provided<sp/>for<sp/>reverse<sp/>compatibility;<sp/>it<sp/>is<sp/>better<sp/>to<sp/>specify<sp/>explicitly<sp/>which<sp/>mode<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use.<sp/><sp/>Since<sp/>this<sp/>is<sp/>only<sp/>for<sp/>reverse<sp/>compatibility,<sp/>and<sp/>shouldn&apos;t<sp/>be<sp/>used,<sp/>I&apos;m<sp/>not<sp/>going<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>spell<sp/>out<sp/>what<sp/>the<sp/>rules<sp/>are.<sp/><sp/>See<sp/>below<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable=</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1224" refid="structgnuplotio_1_1_mode_auto_decoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1227" refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arraea646779afc1e35efaeffcebe81e18a0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref>&lt;T,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if_c&lt;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArrayTraits&lt;T&gt;::depth<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type&gt;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">mode</ref>;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1236" refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arra33ab7f3325313485a7f29355d9a819fc" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref>&lt;T,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if_c&lt;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArrayTraits&lt;T&gt;::depth<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!ArrayTraits&lt;T&gt;::allow_auto_unwrap</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type&gt;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">mode</ref>;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1246" refid="structgnuplotio_1_1_mode_auto_decoder_3_01_t_00_01typename_01boost_1_1enable__if__c_3_01_07_arra8faa7fb46cef74a29a23f22c000e4a99" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref>&lt;T,</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if_c&lt;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArrayTraits&lt;T&gt;::depth<sp/>==<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayTraits&lt;T&gt;::allow_auto_unwrap</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type&gt;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">mode</ref>;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref>&lt;T,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if_c&lt;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArrayTraits&lt;T&gt;::depth<sp/>&gt;<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T&gt;::allow_auto_unwrap</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type&gt;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">mode</ref>;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder</ref>&lt;T,</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>boost::enable_if_c&lt;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArrayTraits&lt;T&gt;::depth<sp/>&gt;<sp/>2)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;T&gt;::allow_auto_unwrap</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type&gt;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">mode</ref>;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>data<sp/>is<sp/>processed<sp/>using<sp/>several<sp/>levels<sp/>of<sp/>functions<sp/>that<sp/>call<sp/>each<sp/>other<sp/>in<sp/>sequence,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>defined<sp/>in<sp/>a<sp/>subsection<sp/>of<sp/>code<sp/>below.<sp/><sp/>Because<sp/>C++<sp/>wants<sp/>you<sp/>to<sp/>declare<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>before<sp/>using<sp/>it,<sp/>we<sp/>begin<sp/>with<sp/>the<sp/>innermost<sp/>function.<sp/><sp/>So<sp/>in<sp/>order<sp/>to<sp/>see<sp/>the<sp/>sequence<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>these<sp/>are<sp/>called,<sp/>you<sp/>should<sp/>read<sp/>the<sp/>following<sp/>subsections<sp/>in<sp/>reverse<sp/>order.<sp/><sp/>Nested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arrays<sp/>are<sp/>formated<sp/>into<sp/>blocks<sp/>(for<sp/>2D<sp/>data)<sp/>and<sp/>lines<sp/>(for<sp/>1D<sp/>or<sp/>2D<sp/>data),<sp/>then<sp/>further</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nesting<sp/>levels<sp/>are<sp/>formatted<sp/>into<sp/>columns.<sp/><sp/>Also<sp/>tag<sp/>dispatching<sp/>is<sp/>used<sp/>in<sp/>order<sp/>to<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>various<sp/>sorts<sp/>of<sp/>behavior.<sp/><sp/>Each<sp/>of<sp/>these<sp/>tasks<sp/>is<sp/>handled<sp/>by<sp/>one<sp/>of<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subsections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>send_scalar()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Send<sp/>a<sp/>scalar<sp/>in<sp/>one<sp/>of<sp/>three<sp/>possible<sp/>ways:<sp/>via<sp/>TextSender,<sp/>BinarySender,<sp/>or<sp/>BinfmtSender,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>depending<sp/>on<sp/>which<sp/>PrintMode<sp/>tag<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_scalar(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode_text" kindref="compound">ModeText</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;T&gt;::send</ref>(stream,<sp/>arg);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_scalar(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode_binary" kindref="compound">ModeBinary</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>BinarySender&lt;T&gt;::send(stream,<sp/>arg);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send_scalar(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;,<sp/><ref refid="structgnuplotio_1_1_mode_binfmt" kindref="compound">ModeBinfmt</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;T&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>deref_and_print()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dereferences<sp/>and<sp/>prints<sp/>the<sp/>given<sp/>range<sp/>(iterator).<sp/><sp/>At<sp/>this<sp/>point<sp/>we<sp/>are<sp/>done<sp/>with<sp/>treating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>containers<sp/>as<sp/>blocks<sp/>(for<sp/>2D<sp/>data)<sp/>and<sp/>lines<sp/>(for<sp/>1D<sp/>or<sp/>2D<sp/>data).<sp/><sp/>Any<sp/>further<sp/>levels<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nested<sp/>containers<sp/>will<sp/>at<sp/>this<sp/>point<sp/>be<sp/>treated<sp/>as<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>arg<sp/>is<sp/>not<sp/>a<sp/>container,<sp/>then<sp/>print<sp/>it<sp/>via<sp/>send_scalar().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::disable_if_c&lt;T::is_container&gt;::type</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">deref_and_print(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type<sp/>&amp;v<sp/>=<sp/>arg.deref();</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>send_scalar(stream,<sp/>v,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>arg<sp/>is<sp/>a<sp/>container<sp/>(but<sp/>not<sp/>a<sp/>PairOfRange<sp/>or<sp/>VecOfRange,<sp/>which<sp/>are<sp/>handled<sp/>below)<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treat<sp/>the<sp/>contents<sp/>as<sp/>columns,<sp/>iterating<sp/>over<sp/>the<sp/>contents<sp/>recursively.<sp/><sp/>If<sp/>outputting<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>text<sp/>mode,<sp/>put<sp/>a<sp/>space<sp/>between<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if_c&lt;T::is_container&gt;::type</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">deref_and_print(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::subiter_type<sp/>subrange<sp/>=<sp/>arg.deref_subiter();</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt<sp/>&amp;&amp;<sp/>subrange.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_array_print<sp/>&amp;&amp;<sp/>PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!subrange.is_end())<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!first<sp/>&amp;&amp;<sp/>PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deref_and_print(stream,<sp/>subrange,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subrange.inc();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_array_print<sp/>&amp;&amp;<sp/>PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PairOfRange<sp/>is<sp/>treated<sp/>as<sp/>columns.<sp/><sp/>In<sp/>text<sp/>mode,<sp/>put<sp/>a<sp/>space<sp/>between<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deref_and_print(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_pair_of_range" kindref="compound">PairOfRange&lt;T, U&gt;</ref><sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>deref_and_print(stream,<sp/>arg.l,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>deref_and_print(stream,<sp/>arg.r,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VecOfRange<sp/>is<sp/>treated<sp/>as<sp/>columns.<sp/><sp/>In<sp/>text<sp/>mode,<sp/>put<sp/>a<sp/>space<sp/>between<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deref_and_print(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;T&gt;</ref><sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt<sp/>&amp;&amp;<sp/>arg.rvec.empty())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;arg.rvec.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&amp;&amp;<sp/>PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deref_and_print(stream,<sp/>arg.rvec[i],<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>print_block()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>format<sp/>nested<sp/>containers<sp/>into<sp/>blocks<sp/>(for<sp/>2D<sp/>data)<sp/>and<sp/>lines.<sp/><sp/>Actually,<sp/>block<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>line<sp/>formatting<sp/>is<sp/>only<sp/>truely<sp/>needed<sp/>for<sp/>text<sp/>mode<sp/>output,<sp/>but<sp/>for<sp/>uniformity<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>also<sp/>invoked<sp/>in<sp/>binary<sp/>mode<sp/>(the<sp/>PrintMode<sp/>tag<sp/>determines<sp/>the<sp/>output<sp/>mode).<sp/><sp/>If<sp/>the<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>just<sp/>print<sp/>the<sp/>array<sp/>size<sp/>or<sp/>the<sp/>binary<sp/>format<sp/>string,<sp/>then<sp/>the<sp/>loops<sp/>exit<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Depth<sp/>argument<sp/>tells<sp/>how<sp/>deep<sp/>to<sp/>recurse.<sp/><sp/>It<sp/>will<sp/>be<sp/>either<sp/>`2`<sp/>for<sp/>2D<sp/>data,<sp/>formatted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>into<sp/>blocks<sp/>and<sp/>lines,<sp/>with<sp/>empty<sp/>lines<sp/>between<sp/>blocks,<sp/>or<sp/>`1`<sp/>for<sp/>1D<sp/>data<sp/>formatted<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lines<sp/>but<sp/>not<sp/>blocks.<sp/><sp/>Gnuplot<sp/>only<sp/>supports<sp/>1D<sp/>and<sp/>2D<sp/>data,<sp/>but<sp/>if<sp/>it<sp/>were<sp/>to<sp/>support<sp/>3D<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>future<sp/>(e.g.<sp/>volume<sp/>rendering),<sp/>all<sp/>that<sp/>would<sp/>be<sp/>needed<sp/>would<sp/>be<sp/>some<sp/>trivial<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>section.<sp/><sp/>After<sp/>Depth<sp/>number<sp/>of<sp/>nested<sp/>containers<sp/>have<sp/>been<sp/>recursed<sp/>into,<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>passed<sp/>to<sp/>deref_and_print(),<sp/>which<sp/>treats<sp/>any<sp/>further<sp/>nested<sp/>containers<sp/>as<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depth==1<sp/>and<sp/>we<sp/>are<sp/>not<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array.<sp/><sp/>Send<sp/>each<sp/>element<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>range<sp/>to<sp/>deref_and_print()<sp/>for<sp/>further<sp/>processing<sp/>into<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if_c&lt;(Depth==1)<sp/>&amp;&amp;<sp/>!PrintMode::is_size&gt;::type</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">print_block(std::ostream<sp/>&amp;stream,<sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt<sp/>&amp;&amp;<sp/>arg.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>!arg.is_end();<sp/>arg.inc())<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//print_entry(arg.deref());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deref_and_print(stream,<sp/>arg,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>binary<sp/>format<sp/>string,<sp/>only<sp/>the<sp/>first<sp/>element<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>looked<sp/>at.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depth&gt;1<sp/>and<sp/>we<sp/>are<sp/>not<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array.<sp/><sp/>Loop<sp/>over<sp/>the<sp/>range<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recurse<sp/>into<sp/>print_block()<sp/>with<sp/>Depth<sp/>-&gt;<sp/>Depth-1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if_c&lt;(Depth&gt;1)<sp/>&amp;&amp;<sp/>!PrintMode::is_size&gt;::type</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">print_block(std::ostream<sp/>&amp;stream,<sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt<sp/>&amp;&amp;<sp/>arg.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>!arg.is_end();<sp/>arg.inc())<sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_array_print<sp/>&amp;&amp;<sp/>PrintMode::is_text)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;block&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::subiter_type<sp/>sub<sp/>=<sp/>arg.deref_subiter();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_block&lt;Depth-1&gt;(stream,<sp/>sub,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>binary<sp/>format<sp/>string,<sp/>only<sp/>the<sp/>first<sp/>element<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>looked<sp/>at.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(PrintMode::is_binfmt)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Determine<sp/>how<sp/>many<sp/>elements<sp/>are<sp/>in<sp/>the<sp/>given<sp/>range.<sp/><sp/>Used<sp/>in<sp/>the<sp/>functions<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_range_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>not<sp/>the<sp/>fastest<sp/>way.<sp/><sp/>Implement<sp/>a<sp/>size()<sp/>method<sp/>for<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(T<sp/>i=arg;<sp/>!i.is_end();<sp/>i.inc())<sp/>++ret;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depth==1<sp/>and<sp/>we<sp/>are<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if_c&lt;(Depth==1)<sp/>&amp;&amp;<sp/>PrintMode::is_size&gt;::type</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">print_block(std::ostream<sp/>&amp;stream,<sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>get_range_size(arg);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depth&gt;1<sp/>and<sp/>we<sp/>are<sp/>asked<sp/>to<sp/>print<sp/>the<sp/>size<sp/>of<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>boost::enable_if_c&lt;(Depth&gt;1)<sp/>&amp;&amp;<sp/>PrintMode::is_size&gt;::type</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">print_block(std::ostream<sp/>&amp;stream,<sp/>T<sp/>&amp;arg,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(arg.is_end())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref>();</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>seems<sp/>that<sp/>size<sp/>for<sp/>two<sp/>dimensional<sp/>arrays<sp/>needs<sp/>the<sp/>fastest<sp/>varying<sp/>index<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contrary<sp/>to<sp/>intuition.<sp/><sp/>The<sp/>gnuplot<sp/>documentation<sp/>is<sp/>not<sp/>too<sp/>clear<sp/>on<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::subiter_type<sp/>sub<sp/>=<sp/>arg.deref_subiter();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>print_block&lt;Depth-1&gt;(stream,<sp/>sub,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get_range_size(arg);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>handle_colunwrap_tag()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>passed<sp/>the<sp/>ColUnwrapYes<sp/>then<sp/>treat<sp/>the<sp/>outermost<sp/>nested<sp/>container<sp/>as<sp/>columns<sp/>by<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get_columns_range().<sp/><sp/>Otherwise<sp/>just<sp/>call<sp/>get_range().<sp/><sp/>The<sp/>range<sp/>iterator<sp/>is<sp/>then<sp/>passed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>print_block()<sp/>for<sp/>further<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_colunwrap_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_no" kindref="compound">ColUnwrapNo</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG(<ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref><sp/>&gt;=<sp/>Depth,<sp/></highlight><highlight class="stringliteral">&quot;container<sp/>not<sp/>deep<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::range_type</ref><sp/>range<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::get_range</ref>(arg);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>print_block&lt;Depth&gt;(stream,<sp/>range,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Depth,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_colunwrap_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_yes" kindref="compound">ColUnwrapYes</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG(<ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref><sp/>&gt;=<sp/>Depth+1,<sp/></highlight><highlight class="stringliteral">&quot;container<sp/>not<sp/>deep<sp/>enough&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_vec_of_range" kindref="compound">VecOfRange&lt;typename ArrayTraits&lt;T&gt;::range_type::subiter_type</ref>&gt;<sp/>cols<sp/>=<sp/>get_columns_range(arg);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>print_block&lt;Depth&gt;(stream,<sp/>cols,<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>handle_organization_tag()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>OrganizationMode<sp/>tag<sp/>then<sp/>forward<sp/>to<sp/>handle_colunwrap_tag()<sp/>for<sp/>further</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>processing.<sp/><sp/>If<sp/>passed<sp/>the<sp/>Mode1D<sp/>or<sp/>Mode2D<sp/>tags,<sp/>then<sp/>set<sp/>Depth=1<sp/>or<sp/>Depth=2.<sp/><sp/>If<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mode{1,2}DUnwrap<sp/>then<sp/>use<sp/>the<sp/>ColUnwrapYes<sp/>tag.<sp/><sp/>If<sp/>passed<sp/>ModeAuto<sp/>(which<sp/>is<sp/>for<sp/>legacy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>support)<sp/>then<sp/>use<sp/>ModeAutoDecoder<sp/>to<sp/>guess<sp/>which<sp/>of<sp/>Mode1D,<sp/>Mode2D,<sp/>etc.<sp/>should<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_organization_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_colunwrap_tag&lt;1&gt;(stream,<sp/>arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_no" kindref="compound">ColUnwrapNo</ref>(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_organization_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_colunwrap_tag&lt;2&gt;(stream,<sp/>arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_no" kindref="compound">ColUnwrapNo</ref>(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_organization_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_colunwrap_tag&lt;1&gt;(stream,<sp/>arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_yes" kindref="compound">ColUnwrapYes</ref>(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_organization_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_colunwrap_tag&lt;2&gt;(stream,<sp/>arg,<sp/><ref refid="structgnuplotio_1_1_col_unwrap_yes" kindref="compound">ColUnwrapYes</ref>(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handle_organization_tag(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_organization_tag(stream,<sp/>arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_mode_auto_decoder" kindref="compound">ModeAutoDecoder&lt;T&gt;::mode</ref>(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>entry<sp/>point<sp/>for<sp/>the<sp/>processing<sp/>defined<sp/>in<sp/>this<sp/>section.<sp/><sp/>It<sp/>just<sp/>forwards<sp/>immediately<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle_organization_tag().<sp/><sp/>This<sp/>function<sp/>is<sp/>only<sp/>here<sp/>to<sp/>give<sp/>a<sp/>sane<sp/>name<sp/>to<sp/>the<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>allowed<sp/>values<sp/>for<sp/>the<sp/>OrganizationMode<sp/>and<sp/>PrintMode<sp/>tags<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pr</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">Mode&gt;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>top_level_array_sender(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>OrganizationMode,<sp/>PrintMode)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>handle_organization_tag(stream,<sp/>arg,<sp/>OrganizationMode(),<sp/>PrintMode());</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>FileHandleWrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>holds<sp/>the<sp/>file<sp/>handle<sp/>that<sp/>gnuplot<sp/>commands<sp/>will<sp/>be<sp/>sent<sp/>to.<sp/><sp/>The<sp/>purpose<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrapper<sp/>is<sp/>twofold:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>It<sp/>allows<sp/>storing<sp/>the<sp/>FILE*<sp/>before<sp/>it<sp/>gets<sp/>passed<sp/>to<sp/>the<sp/>boost::iostreams::stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>constructor<sp/>(which<sp/>is<sp/>a<sp/>base<sp/>class<sp/>of<sp/>the<sp/>main<sp/>Gnuplot<sp/>class).<sp/><sp/>This<sp/>is<sp/>accomplished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>via<sp/>multiple<sp/>inheritance<sp/>as<sp/>described<sp/>at<sp/>http://stackoverflow.com/a/3821756/1048959</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>It<sp/>remembers<sp/>whether<sp/>the<sp/>handle<sp/>needs<sp/>to<sp/>be<sp/>closed<sp/>via<sp/>fclose<sp/>or<sp/>pclose.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523" refid="structgnuplotio_1_1_file_handle_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>(std::FILE<sp/>*_fh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_should_use_pclose)<sp/>:</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapped_fh(_fh),<sp/>should_use_pclose(_should_use_pclose)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fh_close()<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(should_use_pclose)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(GNUPLOT_PCLOSE(wrapped_fh))<sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pclose<sp/>returned<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fclose(wrapped_fh))<sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;fclose<sp/>returned<sp/>error&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fh_fileno()<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GNUPLOT_FILENO(wrapped_fh);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::FILE<sp/>*wrapped_fh;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_use_pclose;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Main<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551" refid="classgnuplotio_1_1_gnuplot" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>:</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>setup<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>before<sp/>obtaining<sp/>the<sp/>file<sp/>descriptor<sp/>that<sp/>gets<sp/>passed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>boost::iostreams::stream.<sp/><sp/>This<sp/>is<sp/>accomplished<sp/>by<sp/>using<sp/>a<sp/>multiple<sp/>inheritance<sp/>trick,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>described<sp/>at<sp/>http://stackoverflow.com/a/3821756/1048959</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>,</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>boost::iostreams::stream&lt;boost::iostreams::file_descriptor_sink&gt;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>get_default_cmd()<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_PUSH</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from_env<sp/>=<sp/>std::getenv(</highlight><highlight class="stringliteral">&quot;GNUPLOT_IOSTREAM_CMD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_POP</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from_env<sp/>&amp;&amp;<sp/>from_env[0])<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>from_env;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GNUPLOT_DEFAULT_COMMAND;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref><sp/>open_cmdline(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;in)<sp/>{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cmd<sp/>=<sp/>in.empty()<sp/>?<sp/>get_default_cmd()<sp/>:<sp/>in;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!cmd.empty());</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cmd[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fn<sp/>=<sp/>cmd.substr(1);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_PUSH</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fh<sp/>=<sp/>std::fopen(fn.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_MSVC_WARNING_4996_POP</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fh)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::ios_base::failure(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>file<sp/>&quot;</highlight><highlight class="normal">+fn));</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>(fh,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fh<sp/>=<sp/>GNUPLOT_POPEN(cmd.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!fh)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::ios_base::failure(</highlight><highlight class="stringliteral">&quot;cannot<sp/>open<sp/>pipe<sp/>&quot;</highlight><highlight class="normal">+cmd));</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>(fh,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;_cmd=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>(open_cmdline(_cmd)),</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::stream&lt;boost::iostreams::file_descriptor_sink&gt;(</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fh_fileno(),</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_VERSION<sp/>&gt;=<sp/>104400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::never_close_handle</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feedback(NULL),</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files(),</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_messages(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::scientific<sp/>&lt;&lt;<sp/>std::setprecision(17);<sp/><sp/></highlight><highlight class="comment">//<sp/>refer<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref>(FILE<sp/>*_fh)<sp/>:</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_file_handle_wrapper" kindref="compound">FileHandleWrapper</ref>(_fh,<sp/>0),</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::stream&lt;boost::iostreams::file_descriptor_sink&gt;(</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fh_fileno(),</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_VERSION<sp/>&gt;=<sp/>104400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::iostreams::never_close_handle</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feedback(NULL),</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files(),</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_messages(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::scientific<sp/>&lt;&lt;<sp/>std::setprecision(17);<sp/><sp/></highlight><highlight class="comment">//<sp/>refer<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>noncopyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_messages)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ending<sp/>gnuplot<sp/>session&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>boost&apos;s<sp/>close<sp/>method<sp/>calls<sp/>close()<sp/>on<sp/>the<sp/>file<sp/>descriptor,<sp/>but<sp/>we<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>sometimes<sp/>use<sp/>pclose<sp/>instead.<sp/><sp/>For<sp/>now,<sp/>just<sp/>skip<sp/>calling<sp/>boost&apos;s<sp/>close<sp/>and<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flush<sp/>just<sp/>in<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_flush();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wish<sp/>boost<sp/>had<sp/>a<sp/>pclose<sp/>method...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//close();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fh_close();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>feedback;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clearTmpfiles()<sp/>{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>destructors<sp/>will<sp/>cause<sp/>deletion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files.clear();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_flush()<sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(wrapped_fh);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>make_tmpfile()<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;GnuplotTmpfile&gt;<sp/>tmp_file(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GnuplotTmpfile());</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>file<sp/>will<sp/>be<sp/>removed<sp/>once<sp/>the<sp/>pointer<sp/>is<sp/>removed<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tmp_files<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_files.push_back(tmp_file);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp_file-&gt;file.string();</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::logic_error(</highlight><highlight class="stringliteral">&quot;no<sp/>filename<sp/>given<sp/>and<sp/>temporary<sp/>files<sp/>not<sp/>enabled&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Generic<sp/>sender<sp/>routines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>declared<sp/>public,<sp/>but<sp/>are<sp/>undocumented.<sp/><sp/>It<sp/>is<sp/>recommended<sp/>to<sp/>use<sp/>the<sp/>functions<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>section,<sp/>which<sp/>serve<sp/>as<sp/>adapters<sp/>that<sp/>pass<sp/>specific<sp/>values<sp/>for<sp/>the<sp/>OrganizationMode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode&gt;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>OrganizationMode)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_text" kindref="compound">ModeText</ref>());</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>gnuplot&apos;s<sp/>&quot;end<sp/>of<sp/>array&quot;<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_flush();<sp/></highlight><highlight class="comment">//<sp/>probably<sp/>not<sp/>really<sp/>needed,<sp/>but<sp/>doesn&apos;t<sp/>hurt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode&gt;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;sendBinary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>OrganizationMode)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_binary" kindref="compound">ModeBinary</ref>());</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_flush();<sp/></highlight><highlight class="comment">//<sp/>probably<sp/>not<sp/>really<sp/>needed,<sp/>but<sp/>doesn&apos;t<sp/>hurt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode&gt;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>binfmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/>OrganizationMode)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert((arr_or_rec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(arr_or_rec<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;record&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ret;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>tmp;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>format=&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(tmp,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_binfmt" kindref="compound">ModeBinfmt</ref>());</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>arr_or_rec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(tmp,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_size" kindref="compound">ModeSize</ref>());</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tmp.str();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1plotting__empty__container" kindref="compound">plotting_empty_container</ref><sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;<sp/>format=&apos;&apos;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>arr_or_rec<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=(0)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>empty<sp/>filename<sp/>makes<sp/>temporary<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode&gt;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>std::string<sp/>filename,<sp/>OrganizationMode)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filename.empty())<sp/>filename<sp/>=<sp/>make_tmpfile();</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fstream<sp/>tmp_stream(filename.c_str(),<sp/>std::fstream::out);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_stream<sp/>&lt;&lt;<sp/>std::scientific<sp/>&lt;&lt;<sp/>std::setprecision(17);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(tmp_stream,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_text" kindref="compound">ModeText</ref>());</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_stream.close();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>cmdline;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>hopefully<sp/>filename<sp/>doesn&apos;t<sp/>contain<sp/>quotes<sp/>or<sp/>such...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdline<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmdline.str();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>empty<sp/>filename<sp/>makes<sp/>temporary<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OrganizationMode&gt;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>binaryFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/>std::string<sp/>filename,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/>OrganizationMode)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(filename.empty())<sp/>filename<sp/>=<sp/>make_tmpfile();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fstream<sp/>tmp_stream(filename.c_str(),<sp/>std::fstream::out<sp/>|<sp/>std::fstream::binary);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_level_array_sender(tmp_stream,<sp/>arg,<sp/>OrganizationMode(),<sp/><ref refid="structgnuplotio_1_1_mode_binary" kindref="compound">ModeBinary</ref>());</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_stream.close();</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>cmdline;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>hopefully<sp/>filename<sp/>doesn&apos;t<sp/>contain<sp/>quotes<sp/>or<sp/>such...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmdline<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>binary&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binfmt(arg,<sp/>arr_or_rec,<sp/>OrganizationMode());</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmdline.str();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Deprecated<sp/>data<sp/>sending<sp/>interface<sp/>that<sp/>guesses<sp/>an<sp/>appropriate<sp/>OrganizationMode.<sp/><sp/>This<sp/>is<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>reverse<sp/>compatibility.<sp/><sp/>Don&apos;t<sp/>use<sp/>it.<sp/><sp/>A<sp/>warning<sp/>will<sp/>be<sp/>printed<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNUPLOT_DEPRECATE_WARN<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>GNUPLOT_DEPRECATE(</highlight><highlight class="stringliteral">&quot;use<sp/>send1d<sp/>or<sp/>send2d&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;send(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send(arg,<sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>GNUPLOT_DEPRECATE(</highlight><highlight class="stringliteral">&quot;use<sp/>binfmt1d<sp/>or<sp/>binfmt2d&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binfmt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec=</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binfmt(arg,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>GNUPLOT_DEPRECATE(</highlight><highlight class="stringliteral">&quot;use<sp/>sendBinary1d<sp/>or<sp/>sendBinary2d&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;sendBinary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sendBinary(arg,<sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>GNUPLOT_DEPRECATE(</highlight><highlight class="stringliteral">&quot;use<sp/>file1d<sp/>or<sp/>file2d&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file(arg,<sp/>filename,<sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>GNUPLOT_DEPRECATE(</highlight><highlight class="stringliteral">&quot;use<sp/>binArr1d<sp/>or<sp/>binArr2d&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binaryFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec=</highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFile(arg,<sp/>filename,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode_auto" kindref="compound">ModeAuto</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Public<sp/>(documented)<sp/>data<sp/>sending<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>seems<sp/>odd<sp/>to<sp/>define<sp/>16<sp/>different<sp/>functions,<sp/>but<sp/>I<sp/>think<sp/>this<sp/>ends<sp/>up<sp/>being<sp/>the<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>convenient<sp/>in<sp/>terms<sp/>of<sp/>usage<sp/>by<sp/>the<sp/>end<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;send1d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send(arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;send2d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send(arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;send1d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send(arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;send2d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>send(arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;sendBinary1d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sendBinary(arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;sendBinary2d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sendBinary(arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;sendBinary1d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sendBinary(arg,<sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">Gnuplot</ref><sp/>&amp;sendBinary2d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sendBinary(arg,<sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>file1d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file(arg,<sp/>filename,<sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>file2d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file(arg,<sp/>filename,<sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>file1d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file(arg,<sp/>filename,<sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>file2d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file(arg,<sp/>filename,<sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFmt1d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binfmt(arg,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFmt2d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binfmt(arg,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFmt1d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binfmt(arg,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFmt2d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binfmt(arg,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFile1d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFile(arg,<sp/>filename,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode1_d" kindref="compound">Mode1D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFile2d<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFile(arg,<sp/>filename,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode2_d" kindref="compound">Mode2D</ref><sp/><sp/><sp/><sp/><sp/><sp/>());<sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFile1d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFile(arg,<sp/>filename,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode1_d_unwrap" kindref="compound">Mode1DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>std::string<sp/>binFile2d_colmajor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;arr_or_rec,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFile(arg,<sp/>filename,<sp/>arr_or_rec,<sp/><sp/><ref refid="structgnuplotio_1_1_mode2_d_unwrap" kindref="compound">Mode2DUnwrap</ref>());<sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_ENABLE_FEEDBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Input<sp/>variables<sp/>are<sp/>set<sp/>to<sp/>the<sp/>mouse<sp/>position<sp/>and<sp/>button.<sp/><sp/>If<sp/>the<sp/>gnuplot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>window<sp/>is<sp/>closed,<sp/>button<sp/>-1<sp/>is<sp/>returned.<sp/><sp/>The<sp/>msg<sp/>parameter<sp/>is<sp/>the<sp/>prompt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>printed<sp/>to<sp/>the<sp/>console.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getMouse(</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;mx,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;my,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;mb,</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>msg=</highlight><highlight class="stringliteral">&quot;Click<sp/>Mouse!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocFeedback();</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>mouse&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pause<sp/>mouse<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\n\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;if<sp/>(exists(\&quot;MOUSE_X\&quot;))<sp/>print<sp/>MOUSE_X,<sp/>MOUSE_Y,<sp/>MOUSE_BUTTON;<sp/>else<sp/>print<sp/>0,<sp/>0,<sp/>-1;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_messages)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;begin<sp/>scanf&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(3<sp/>!=<sp/>fscanf(feedback-&gt;handle(),<sp/></highlight><highlight class="stringliteral">&quot;%50lf<sp/>%50lf<sp/>%50d&quot;</highlight><highlight class="normal">,<sp/>&amp;mx,<sp/>&amp;my,<sp/>&amp;mb))<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>parse<sp/>reply&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(debug_messages)<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>scanf&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocFeedback()<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!feedback)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_ENABLE_PTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feedback<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GnuplotFeedbackPty(debug_messages);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment">//#elif<sp/>defined<sp/>GNUPLOT_USE_TMPFILE</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>feedback<sp/>=<sp/>new<sp/>GnuplotFeedbackTmpfile(debug_messages);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>shouldn&apos;t<sp/>happen<sp/>because<sp/>we<sp/>are<sp/>in<sp/>an<sp/>`#ifdef<sp/>GNUPLOT_ENABLE_FEEDBACK`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>which<sp/>should<sp/>only<sp/>be<sp/>activated<sp/>if<sp/>GNUPLOT_ENABLE_PTY<sp/>is<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>feedback<sp/>mechanism<sp/>defined.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>print<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>feedback-&gt;filename()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ENABLE_FEEDBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgnuplotio_1_1_gnuplot_feedback" kindref="compound">GnuplotFeedback</ref><sp/>*feedback;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;boost::shared_ptr&lt;GnuplotTmpfile&gt;<sp/>&gt;<sp/>tmp_files;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>a<sp/>placeholder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>tmp_files;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_USE_TMPFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>debug_messages;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gnuplotio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>version<sp/>of<sp/>this<sp/>library<sp/>didn&apos;t<sp/>use<sp/>namespaces,<sp/>and<sp/>now<sp/>this<sp/>must<sp/>be<sp/>here<sp/>forever</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>reverse<sp/>compatibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_gnuplot" kindref="compound">gnuplotio::Gnuplot</ref>;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_IOSTREAM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{1<sp/>Support<sp/>for<sp/>3rd<sp/>party<sp/>array<sp/>libraries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Blitz<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>main<sp/>header<sp/>guard<sp/>so<sp/>that<sp/>it<sp/>will<sp/>be<sp/>compiled<sp/>when<sp/>people<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&quot;gnuplot-iostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&lt;blitz/array.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&quot;gnuplot-iostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>has<sp/>its<sp/>own<sp/>header<sp/>guard<sp/>to<sp/>avoid<sp/>double<sp/>inclusion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BZ_BLITZ_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GNUPLOT_BLITZ_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GNUPLOT_BLITZ_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegnuplotio" kindref="compound">gnuplotio</ref><sp/>{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender</ref>&lt;blitz::TinyVector&lt;T,<sp/>N&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binfmt_sender" kindref="compound">BinfmtSender&lt;T&gt;::send</ref>(stream);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender</ref>&lt;blitz::TinyVector&lt;T,<sp/>N&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::TinyVector&lt;T,<sp/>N&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i)<sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_text_sender" kindref="compound">TextSender&lt;T&gt;::send</ref>(stream,<sp/>v[i]);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender</ref>&lt;blitz::TinyVector&lt;T,<sp/>N&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>send(std::ostream<sp/>&amp;stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::TinyVector&lt;T,<sp/>N&gt;<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgnuplotio_1_1_binary_sender" kindref="compound">BinarySender&lt;T&gt;::send</ref>(stream,<sp/>v[i]);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Error_WasBlitzPartialSlice<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ArrayDim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SliceDim&gt;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BlitzIterator<sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>BlitzIterator()<sp/>:<sp/>p(NULL)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>BlitzIterator(</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>*_p,</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::TinyVector&lt;int,<sp/>ArrayDim&gt;<sp/>_idx</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>:<sp/>p(_p),<sp/>idx(_idx)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Error_WasBlitzPartialSlice<sp/>value_type;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BlitzIterator&lt;T,<sp/>ArrayDim,<sp/>SliceDim-1&gt;<sp/>subiter_type;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>it<sp/>would<sp/>be<sp/>nice<sp/>to<sp/>also<sp/>handle<sp/>one-based<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx[ArrayDim-SliceDim]<sp/>==<sp/>p-&gt;shape()[ArrayDim-SliceDim];</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++idx[ArrayDim-SliceDim];</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>deref<sp/>a<sp/>blitz<sp/>slice&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BlitzIterator&lt;T,<sp/>ArrayDim,<sp/>SliceDim-1&gt;(p,<sp/>idx);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>*p;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>blitz::TinyVector&lt;int,<sp/>ArrayDim&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ArrayDim&gt;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BlitzIterator&lt;T,<sp/>ArrayDim,<sp/>1&gt;<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>BlitzIterator()<sp/>:<sp/>p(NULL)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>BlitzIterator(</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>*_p,</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::TinyVector&lt;int,<sp/>ArrayDim&gt;<sp/>_idx</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>:<sp/>p(_p),<sp/>idx(_idx)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/>subiter_type;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>-<sp/>it<sp/>would<sp/>be<sp/>nice<sp/>to<sp/>also<sp/>handle<sp/>one-based<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx[ArrayDim-1]<sp/>==<sp/>p-&gt;shape()[ArrayDim-1];</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++idx[ArrayDim-1];</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*p)(idx);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>was<sp/>not<sp/>a<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>*p;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>blitz::TinyVector&lt;int,<sp/>ArrayDim&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ArrayDim&gt;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref><sp/>+<sp/>ArrayDim;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BlitzIterator&lt;T,<sp/>ArrayDim,<sp/>ArrayDim&gt;<sp/>range_type;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>blitz::Array&lt;T,<sp/>ArrayDim&gt;<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blitz::TinyVector&lt;int,<sp/>ArrayDim&gt;<sp/>start_idx;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(&amp;arg,<sp/>start_idx);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gnuplotio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_BLITZ_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>BZ_BLITZ_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{2<sp/>Armadillo<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>main<sp/>header<sp/>guard<sp/>so<sp/>that<sp/>it<sp/>will<sp/>be<sp/>compiled<sp/>when<sp/>people<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&quot;gnuplot-iostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&lt;armadillo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&quot;gnuplot-iostream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>it<sp/>has<sp/>its<sp/>own<sp/>header<sp/>guard<sp/>to<sp/>avoid<sp/>double<sp/>inclusion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ARMA_INCLUDES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GNUPLOT_ARMADILLO_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GNUPLOT_ARMADILLO_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegnuplotio" kindref="compound">gnuplotio</ref><sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref>&lt;arma::Row<sp/><sp/>&lt;T&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;true&gt;<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref>&lt;arma::Col<sp/><sp/>&lt;T&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;true&gt;<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref>&lt;arma::Mat<sp/><sp/>&lt;T&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;true&gt;<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref>&lt;arma::Cube<sp/>&lt;T&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;true&gt;<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgnuplotio_1_1dont__treat__as__stl__container" kindref="compound">dont_treat_as_stl_container</ref>&lt;arma::field&lt;T&gt;<sp/>&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::mpl::bool_&lt;true&gt;<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{3<sp/>Cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;arma::Cube&lt;T&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SliceRange<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SliceRange()<sp/>:<sp/>p(NULL),<sp/>col(0),<sp/>slice(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SliceRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*_p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_row,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_col)<sp/>:</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p(_p),<sp/>row(_row),<sp/>col(_col),<sp/>slice(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/>subiter_type;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice<sp/>==<sp/>p-&gt;n_slices;<sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++slice;<sp/>}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*p)(row,<sp/>col,<sp/>slice);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>was<sp/>not<sp/>a<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*p;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/>col,<sp/>slice;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ColRange<sp/>{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColRange()<sp/>:<sp/>p(NULL),<sp/>row(0),<sp/>col(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ColRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*_p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_row)<sp/>:</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p(_p),<sp/>row(_row),<sp/>col(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SliceRange<sp/>subiter_type;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col<sp/>==<sp/>p-&gt;n_cols;<sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++col;<sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>call<sp/>deref<sp/>on<sp/>an<sp/>armadillo<sp/>cube<sp/>col&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subiter_type(p,<sp/>row,<sp/>col);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*p;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/>col;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RowRange<sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RowRange()<sp/>:<sp/>p(NULL),<sp/>row(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RowRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*_p)<sp/>:<sp/>p(_p),<sp/>row(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ColRange<sp/>subiter_type;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row<sp/>==<sp/>p-&gt;n_rows;<sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++row;<sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>call<sp/>deref<sp/>on<sp/>an<sp/>armadillo<sp/>cube<sp/>row&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subiter_type(p,<sp/>row);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>*p;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref><sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RowRange<sp/>range_type;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Cube&lt;T&gt;<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>arg.n_elem<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_rows<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(&amp;arg);</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{3<sp/>Mat<sp/>and<sp/>Field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RF,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArrayTraits_ArmaMatOrField<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ColRange<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColRange()<sp/>:<sp/>p(NULL),<sp/>row(0),<sp/>col(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ColRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RF<sp/>*_p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_row)<sp/>:</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p(_p),<sp/>row(_row),<sp/>col(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structgnuplotio_1_1_error___was_not_container" kindref="compound">Error_WasNotContainer</ref><sp/>subiter_type;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col<sp/>==<sp/>p-&gt;n_cols;<sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++col;<sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*p)(row,<sp/>col);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;argument<sp/>was<sp/>not<sp/>a<sp/>container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RF<sp/>*p;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row,<sp/>col;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RowRange<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RowRange()<sp/>:<sp/>p(NULL),<sp/>row(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RowRange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RF<sp/>*_p)<sp/>:<sp/>p(_p),<sp/>row(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ColRange<sp/>subiter_type;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_container<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row<sp/>==<sp/>p-&gt;n_rows;<sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc()<sp/>{<sp/>++row;<sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>deref()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GNUPLOT_STATIC_ASSERT_MSG((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>0),<sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>call<sp/>deref<sp/>on<sp/>an<sp/>armadillo<sp/>matrix<sp/>row&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;static<sp/>assert<sp/>should<sp/>have<sp/>been<sp/>triggered<sp/>by<sp/>this<sp/>point&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subiter_type<sp/>deref_subiter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subiter_type(p,<sp/>row);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RF<sp/>*p;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits&lt;T&gt;::depth</ref><sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RowRange<sp/>range_type;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RF<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>arg.n_elem<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_rows<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(&amp;arg);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;arma::field&lt;T&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ArrayTraits_ArmaMatOrField&lt;arma::field&lt;T&gt;,<sp/>T&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;arma::Mat&lt;T&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ArrayTraits_ArmaMatOrField&lt;arma::Mat&lt;T&gt;,<sp/>T&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{3<sp/>Row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;arma::Row&lt;T&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange&lt;typename arma::Row&lt;T&gt;::const_iterator</ref>,<sp/>T&gt;<sp/>range_type;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Row&lt;T&gt;<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>arg.n_elem<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_rows<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(arg.begin(),<sp/>arg.end());</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{{{3<sp/>Col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgnuplotio_1_1_array_traits" kindref="compound">ArrayTraits</ref>&lt;arma::Col&lt;T&gt;<sp/>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_array_traits_defaults" kindref="compound">ArrayTraitsDefaults</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_auto_unwrap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classgnuplotio_1_1_iterator_range" kindref="compound">IteratorRange&lt;typename arma::Col&lt;T&gt;::const_iterator</ref>,<sp/>T&gt;<sp/>range_type;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>range_type<sp/>get_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Col&lt;T&gt;<sp/>&amp;arg)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>arg.n_elem<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_rows<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>arg.n_cols<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range_type(arg.begin(),<sp/>arg.end());</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gnuplotio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>GNUPLOT_ARMADILLO_SUPPORT_LOADED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ARMA_INCLUDES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}}}1</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/rajshinde/GMOCK/Robot_Controller_Module/include/gnuplot-iostream.h"/>
  </compounddef>
</doxygen>
